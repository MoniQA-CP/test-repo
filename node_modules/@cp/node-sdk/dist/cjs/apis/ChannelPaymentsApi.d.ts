/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import * as runtime from '../runtime';
import type { BuyersEntity, BuyersSearchEntity, CaptureTransactionDto, ChangeNotificationEntity, ChangeNotificationsSearchEntity, CheckoutSessionEntity, ConnectorServiceTokenEntity, CreateBuyerDto, CreateCheckoutSessionDto, CreatePaymentMethodDto, CreatePaymentMethodSessionDto, CreateProvisionedCardTokenDto, CreateTransactionRefundDto, CreateTransactionRequestDto, MerchantEntity, MerchantFeeDetailsEntity, PaymentMethodEntity, PaymentMethodSessionEntity, PaymentMethodsSearchEntity, ReturnNotificationEntity, ReturnNotificationsSearchEntity, TagDto, TransactionEntity, TransactionRefundEntity, TransactionRefundsSearchEntity, TransactionsSearchEntity, UpdateBuyerDto } from '../models';
export interface GetFeeDetailsRequest {
    amount: string;
}
export interface SearchBuyersRequest {
    merchantId?: string;
    buyerId?: string;
    externalBuyerId?: string;
    startDate?: string;
    endDate?: string;
    givenName?: string;
    familyName?: string;
    email?: string;
    cursor?: string;
    limit?: string;
    order?: SearchBuyersOrderEnum;
    searchTerm?: string;
}
export interface SearchChangeNotificationsRequest {
    startDate: string;
    endDate?: string;
    limit?: string;
    order?: SearchChangeNotificationsOrderEnum;
    cursor?: string;
}
export interface SearchPaymentMethodsRequest {
    merchantId?: string;
    paymentMethodId?: string;
    externalPaymentMethodId?: string;
    accountHolderName?: string;
    buyerId?: string;
    externalBuyerId?: string;
    startDate?: Date;
    endDate?: Date;
    method?: Array<SearchPaymentMethodsMethodEnum>;
    currency?: Array<SearchPaymentMethodsCurrencyEnum>;
    cursor?: string;
    limit?: string;
    order?: SearchPaymentMethodsOrderEnum;
}
export interface SearchRefundsRequest {
    merchantId?: string;
    transactionId?: string;
    refundTransactionId?: string;
    status?: Array<SearchRefundsStatusEnum>;
    startDate?: string;
    endDate?: string;
    currency?: Array<SearchRefundsCurrencyEnum>;
    cursor?: string;
    limit?: string;
    order?: SearchRefundsOrderEnum;
}
export interface SearchReturnNotificationsRequest {
    startDate: string;
    endDate?: string;
    limit?: string;
    order?: SearchReturnNotificationsOrderEnum;
    cursor?: string;
}
export interface SearchTransactionsRequest {
    merchantId?: string;
    accountHolderName?: string;
    accountType?: Array<SearchTransactionsAccountTypeEnum>;
    amount?: string;
    amountGreaterThan?: string;
    amountLessThan?: string;
    amountMin?: string;
    amountMax?: string;
    authorizedAt?: string;
    buyerId?: string;
    capturedAt?: string;
    cardType?: Array<SearchTransactionsCardTypeEnum>;
    currency?: Array<SearchTransactionsCurrencyEnum>;
    cursor?: string;
    endDate?: string;
    externalBuyerId?: string;
    hasRefunds?: string;
    includeCFee?: string;
    intent?: Array<SearchTransactionsIntentEnum>;
    last4?: string;
    limit?: string;
    method?: Array<SearchTransactionsMethodEnum>;
    order?: SearchTransactionsOrderEnum;
    paymentMethodId?: string;
    startDate?: string;
    status?: Array<SearchTransactionsStatusEnum>;
    voidedAt?: string;
    sessionId?: string;
    tags?: Array<TagDto>;
    externalTransactionId?: string;
    transactionId?: string;
}
/**
 *
 */
export declare class ChannelPaymentsApi extends runtime.BaseAPI {
    /**
     * Attempts to acknowledge a change notification
     * Acknowledge change notification
    */
    acknowledgeChangeNotification(changeNotificationId: string): Promise<ChangeNotificationEntity>;
    /**
     * Attempts to acknowledge a return notification
     * Acknowledge return notification
    */
    acknowledgeReturnNotification(returnNotificationId: string): Promise<ReturnNotificationEntity>;
    /**
     * Attempts to capture an authorized transaction
     * Capture transaction
    */
    captureTransaction(captureTransactionDto: CaptureTransactionDto, idempotencyKey?: string): Promise<TransactionEntity>;
    /**
     * Creates a new buyer.
     * Create buyer.
    */
    createBuyer(createBuyerDto: CreateBuyerDto): Promise<BuyersEntity>;
    /**
     * Attempts to create a checkout session
     * Create checkout session
    */
    createCheckoutSession(createCheckoutSessionDto: CreateCheckoutSessionDto): Promise<CheckoutSessionEntity>;
    /**
     * Create a new payment method session.
     * Create payment method session.
    */
    createPaymentMethodSession(createPaymentMethodSessionDto: CreatePaymentMethodSessionDto): Promise<PaymentMethodSessionEntity>;
    /**
     * Attempts to create a new transaction by specified intent for a given payment method
     * Create transaction
    */
    createTransaction(createTransactionRequestDto: CreateTransactionRequestDto, idempotencyKey?: string): Promise<TransactionEntity>;
    /**
     * Deletes a buyer by buyer ID.
     * Delete buyer.
    */
    deleteBuyer(buyerId: string): Promise<BuyersEntity>;
    /**
     * Delete connector service token by connectorServiceTokenId.
     * Delete connector service token.
    */
    deleteConnectorServiceToken(connectorServiceTokenId: string): Promise<ConnectorServiceTokenEntity>;
    /**
     * Delete payment method by paymentMethodId.
     * Delete payment method.
    */
    deletePaymentMethod(paymentMethodId: string): Promise<PaymentMethodEntity>;
    /**
     * Find a buyer by buyer ID.
     * Find buyer.
    */
    getBuyer(buyerId: string): Promise<BuyersEntity>;
    /**
     * Attempts to fetch a checkout session
     * Get checkout session
    */
    getCheckoutSession(sessionId: string): Promise<CheckoutSessionEntity>;
    /**
     * Retrieve all child merchants of the merchant associated with the user making the request.
     * Find child merchants
    */
    getChildMerchants(): Promise<Array<MerchantEntity>>;
    /**
     * Find connector service token by connectorServiceTokenId.
     * Find connector service token.
    */
    getConnectorServiceToken(connectorServiceTokenId: string): Promise<ConnectorServiceTokenEntity>;
    /**
     * Find connector service tokens by paymentMethodId.
     * Find connector service tokens.
    */
    getConnectorServiceTokens(paymentMethodId: string): Promise<Array<ConnectorServiceTokenEntity>>;
    /**
     * Get fee details by amount
     * Get fee details
    */
    getFeeDetails(requestParameters: GetFeeDetailsRequest): Promise<MerchantFeeDetailsEntity>;
    /**
     * Retrieve the merchant associated with the user making the request.
     * Find merchant
    */
    getMerchant(): Promise<MerchantEntity>;
    /**
     * Find payment method by paymentMethodId.
     * Find by payment method.
    */
    getPaymentMethod(paymentMethodId: string): Promise<PaymentMethodEntity>;
    /**
     * Find a payment method session by session ID.
     * Find payment method session.
    */
    getPaymentMethodSession(sessionId: string): Promise<PaymentMethodSessionEntity>;
    /**
     * Attempts to find refund by transaction ID and refund ID
     * Find refund
    */
    getRefund(refundId: string): Promise<TransactionRefundEntity>;
    /**
     * Attempts to find a transaction by ID
     * Find transaction
    */
    getTransaction(transactionId: string): Promise<TransactionEntity>;
    /**
     * Provision a stored payment method.
     * Provision stored payment method.
    */
    provisionCardPaymentMethod(createProvisionedCardTokenDto: CreateProvisionedCardTokenDto): Promise<ConnectorServiceTokenEntity>;
    /**
     * Attempts to refund a captured transaction
     * Refund a transaction
    */
    refundTransaction(createTransactionRefundDto: CreateTransactionRefundDto, idempotencyKey?: string): Promise<TransactionRefundEntity>;
    /**
     * Search a buyer by query param
     * Search a buyer
    */
    searchBuyers(requestParameters: SearchBuyersRequest): Promise<BuyersSearchEntity>;
    /**
     * Search all change notifications by date range.
     * Search for change notifications.
    */
    searchChangeNotifications(requestParameters: SearchChangeNotificationsRequest): Promise<ChangeNotificationsSearchEntity>;
    /**
     * Search a payment methods by query params.
     * Search payment methods.
    */
    searchPaymentMethods(requestParameters: SearchPaymentMethodsRequest): Promise<PaymentMethodsSearchEntity>;
    /**
     * Attempts to search refunds by query parameters
     * Search refunds
    */
    searchRefunds(requestParameters: SearchRefundsRequest): Promise<TransactionRefundsSearchEntity>;
    /**
     * Search all return notifications by date range.
     * Search for return notifications.
    */
    searchReturnNotifications(requestParameters: SearchReturnNotificationsRequest): Promise<ReturnNotificationsSearchEntity>;
    /**
     * Search transactions by query params
     * Search transactions
    */
    searchTransactions(requestParameters: SearchTransactionsRequest): Promise<TransactionsSearchEntity>;
    /**
     * Store a payment method.
     * Store payment method.
    */
    storePaymentMethod(createPaymentMethodDto: CreatePaymentMethodDto): Promise<PaymentMethodEntity>;
    /**
     * Updates an existing buyer.
     * Update buyer.
    */
    updateBuyer(updateBuyerDto: UpdateBuyerDto): Promise<BuyersEntity>;
    /**
     * Attempts to void an authorized transaction
     * Void a transaction
    */
    voidTransaction(transactionId: string, idempotencyKey?: string): Promise<TransactionEntity>;
}
/**
 * @export
 */
export declare const SearchBuyersOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SearchBuyersOrderEnum = typeof SearchBuyersOrderEnum[keyof typeof SearchBuyersOrderEnum];
/**
 * @export
 */
export declare const SearchChangeNotificationsOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SearchChangeNotificationsOrderEnum = typeof SearchChangeNotificationsOrderEnum[keyof typeof SearchChangeNotificationsOrderEnum];
/**
 * @export
 */
export declare const SearchPaymentMethodsMethodEnum: {
    readonly Card: "CARD";
    readonly Bank: "BANK";
};
export type SearchPaymentMethodsMethodEnum = typeof SearchPaymentMethodsMethodEnum[keyof typeof SearchPaymentMethodsMethodEnum];
/**
 * @export
 */
export declare const SearchPaymentMethodsCurrencyEnum: {
    readonly Usd: "USD";
};
export type SearchPaymentMethodsCurrencyEnum = typeof SearchPaymentMethodsCurrencyEnum[keyof typeof SearchPaymentMethodsCurrencyEnum];
/**
 * @export
 */
export declare const SearchPaymentMethodsOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SearchPaymentMethodsOrderEnum = typeof SearchPaymentMethodsOrderEnum[keyof typeof SearchPaymentMethodsOrderEnum];
/**
 * @export
 */
export declare const SearchRefundsStatusEnum: {
    readonly Processing: "processing";
    readonly Succeeded: "succeeded";
    readonly Declined: "declined";
    readonly Failed: "failed";
    readonly Voided: "voided";
    readonly Hold: "hold";
    readonly Submitted: "submitted";
    readonly Transmitted: "transmitted";
    readonly Settled: "settled";
    readonly Returned: "returned";
};
export type SearchRefundsStatusEnum = typeof SearchRefundsStatusEnum[keyof typeof SearchRefundsStatusEnum];
/**
 * @export
 */
export declare const SearchRefundsCurrencyEnum: {
    readonly Usd: "USD";
    readonly Cad: "CAD";
    readonly Aud: "AUD";
};
export type SearchRefundsCurrencyEnum = typeof SearchRefundsCurrencyEnum[keyof typeof SearchRefundsCurrencyEnum];
/**
 * @export
 */
export declare const SearchRefundsOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SearchRefundsOrderEnum = typeof SearchRefundsOrderEnum[keyof typeof SearchRefundsOrderEnum];
/**
 * @export
 */
export declare const SearchReturnNotificationsOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SearchReturnNotificationsOrderEnum = typeof SearchReturnNotificationsOrderEnum[keyof typeof SearchReturnNotificationsOrderEnum];
/**
 * @export
 */
export declare const SearchTransactionsAccountTypeEnum: {
    readonly Checking: "CHECKING";
    readonly Savings: "SAVINGS";
};
export type SearchTransactionsAccountTypeEnum = typeof SearchTransactionsAccountTypeEnum[keyof typeof SearchTransactionsAccountTypeEnum];
/**
 * @export
 */
export declare const SearchTransactionsCardTypeEnum: {
    readonly Credit: "CREDIT";
    readonly Debit: "DEBIT";
    readonly Prepaid: "PREPAID";
};
export type SearchTransactionsCardTypeEnum = typeof SearchTransactionsCardTypeEnum[keyof typeof SearchTransactionsCardTypeEnum];
/**
 * @export
 */
export declare const SearchTransactionsCurrencyEnum: {
    readonly Usd: "USD";
    readonly Cad: "CAD";
    readonly Aud: "AUD";
};
export type SearchTransactionsCurrencyEnum = typeof SearchTransactionsCurrencyEnum[keyof typeof SearchTransactionsCurrencyEnum];
/**
 * @export
 */
export declare const SearchTransactionsIntentEnum: {
    readonly Capture: "capture";
    readonly Authorize: "authorize";
    readonly Debit: "debit";
    readonly Credit: "credit";
};
export type SearchTransactionsIntentEnum = typeof SearchTransactionsIntentEnum[keyof typeof SearchTransactionsIntentEnum];
/**
 * @export
 */
export declare const SearchTransactionsMethodEnum: {
    readonly Ach: "ACH";
    readonly Bank: "BANK";
    readonly Card: "CARD";
};
export type SearchTransactionsMethodEnum = typeof SearchTransactionsMethodEnum[keyof typeof SearchTransactionsMethodEnum];
/**
 * @export
 */
export declare const SearchTransactionsOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SearchTransactionsOrderEnum = typeof SearchTransactionsOrderEnum[keyof typeof SearchTransactionsOrderEnum];
/**
 * @export
 */
export declare const SearchTransactionsStatusEnum: {
    readonly Processing: "processing";
    readonly BuyerApprovalPending: "buyerApprovalPending";
    readonly Authorized: "authorized";
    readonly AuthorizationFailed: "authorizationFailed";
    readonly CaptureFailed: "captureFailed";
    readonly Declined: "declined";
    readonly CapturePending: "capturePending";
    readonly Captured: "captured";
    readonly VoidPending: "voidPending";
    readonly Voided: "voided";
    readonly Hold: "hold";
    readonly Submitted: "submitted";
    readonly Transmitted: "transmitted";
    readonly Settled: "settled";
    readonly Returned: "returned";
    readonly Rejected: "rejected";
};
export type SearchTransactionsStatusEnum = typeof SearchTransactionsStatusEnum[keyof typeof SearchTransactionsStatusEnum];
