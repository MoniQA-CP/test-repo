"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckoutSessionBaseEntityTransactionInitiatorEnum = exports.CheckoutSessionBaseEntityStatusEnum = exports.CheckoutSessionBaseEntityUiModeEnum = void 0;
exports.instanceOfCheckoutSessionBaseEntity = instanceOfCheckoutSessionBaseEntity;
exports.CheckoutSessionBaseEntityFromJSON = CheckoutSessionBaseEntityFromJSON;
exports.CheckoutSessionBaseEntityFromJSONTyped = CheckoutSessionBaseEntityFromJSONTyped;
exports.CheckoutSessionBaseEntityToJSON = CheckoutSessionBaseEntityToJSON;
const runtime_1 = require("../runtime");
const AvailablePaymentMethodEntity_1 = require("./AvailablePaymentMethodEntity");
const CheckoutSessionItemBaseEntity_1 = require("./CheckoutSessionItemBaseEntity");
const TagEntity_1 = require("./TagEntity");
/**
 * @export
 */
exports.CheckoutSessionBaseEntityUiModeEnum = {
    Hosted: 'HOSTED',
    Embedded: 'EMBEDDED'
};
/**
 * @export
 */
exports.CheckoutSessionBaseEntityStatusEnum = {
    Pending: 'PENDING',
    Processing: 'PROCESSING',
    Expired: 'EXPIRED',
    Completed: 'COMPLETED'
};
/**
 * @export
 */
exports.CheckoutSessionBaseEntityTransactionInitiatorEnum = {
    Mit: 'MIT',
    Cit: 'CIT',
    Sit: 'SIT'
};
/**
 * Check if a given object implements the CheckoutSessionBaseEntity interface.
 */
function instanceOfCheckoutSessionBaseEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "sessionId" in value;
    isInstance = isInstance && "merchantId" in value;
    isInstance = isInstance && "uiMode" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "subtotal" in value;
    isInstance = isInstance && "feesTotal" in value;
    isInstance = isInstance && "taxTotal" in value;
    isInstance = isInstance && "discountTotal" in value;
    isInstance = isInstance && "shippingTotal" in value;
    isInstance = isInstance && "availablePaymentMethods" in value;
    isInstance = isInstance && "successRedirectUrl" in value;
    isInstance = isInstance && "cancelRedirectUrl" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "canExtend" in value;
    return isInstance;
}
function CheckoutSessionBaseEntityFromJSON(json) {
    return CheckoutSessionBaseEntityFromJSONTyped(json, false);
}
function CheckoutSessionBaseEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'sessionId': json['sessionId'],
        'merchantId': json['merchantId'],
        'uiMode': json['uiMode'],
        'status': json['status'],
        'currency': json['currency'],
        'total': json['total'],
        'subtotal': json['subtotal'],
        'feesTotal': json['feesTotal'],
        'taxTotal': json['taxTotal'],
        'discountTotal': json['discountTotal'],
        'shippingTotal': json['shippingTotal'],
        'availablePaymentMethods': (json['availablePaymentMethods'].map(AvailablePaymentMethodEntity_1.AvailablePaymentMethodEntityFromJSON)),
        'items': !(0, runtime_1.exists)(json, 'items') ? undefined : (json['items'].map(CheckoutSessionItemBaseEntity_1.CheckoutSessionItemBaseEntityFromJSON)),
        'successRedirectUrl': json['successRedirectUrl'],
        'cancelRedirectUrl': json['cancelRedirectUrl'],
        'country': json['country'],
        'expiresAt': !(0, runtime_1.exists)(json, 'expiresAt') ? undefined : (new Date(json['expiresAt'])),
        'expiredAt': !(0, runtime_1.exists)(json, 'expiredAt') ? undefined : (new Date(json['expiredAt'])),
        'canExtend': json['canExtend'],
        'expiredReason': !(0, runtime_1.exists)(json, 'expiredReason') ? undefined : json['expiredReason'],
        'tags': !(0, runtime_1.exists)(json, 'tags') ? undefined : (json['tags'].map(TagEntity_1.TagEntityFromJSON)),
        'canStore': !(0, runtime_1.exists)(json, 'canStore') ? undefined : json['canStore'],
        'buyerId': !(0, runtime_1.exists)(json, 'buyerId') ? undefined : json['buyerId'],
        'externalBuyerId': !(0, runtime_1.exists)(json, 'externalBuyerId') ? undefined : json['externalBuyerId'],
        'transactionInitiator': !(0, runtime_1.exists)(json, 'transactionInitiator') ? undefined : json['transactionInitiator'],
    };
    return (0, runtime_1.removeNullUndefined)(typed);
}
function CheckoutSessionBaseEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'sessionId': value.sessionId,
        'merchantId': value.merchantId,
        'uiMode': value.uiMode,
        'status': value.status,
        'currency': value.currency,
        'total': value.total,
        'subtotal': value.subtotal,
        'feesTotal': value.feesTotal,
        'taxTotal': value.taxTotal,
        'discountTotal': value.discountTotal,
        'shippingTotal': value.shippingTotal,
        'availablePaymentMethods': (value.availablePaymentMethods.map(AvailablePaymentMethodEntity_1.AvailablePaymentMethodEntityToJSON)),
        'items': value.items === undefined ? undefined : (value.items.map(CheckoutSessionItemBaseEntity_1.CheckoutSessionItemBaseEntityToJSON)),
        'successRedirectUrl': value.successRedirectUrl,
        'cancelRedirectUrl': value.cancelRedirectUrl,
        'country': value.country,
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
        'expiredAt': value.expiredAt === undefined ? undefined : (value.expiredAt.toISOString()),
        'canExtend': value.canExtend,
        'expiredReason': value.expiredReason,
        'tags': value.tags === undefined ? undefined : (value.tags.map(TagEntity_1.TagEntityToJSON)),
        'canStore': value.canStore,
        'buyerId': value.buyerId,
        'externalBuyerId': value.externalBuyerId,
        'transactionInitiator': value.transactionInitiator,
    };
}
