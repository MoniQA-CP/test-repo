"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTransactionRequestDtoSecCodeEnum = exports.CreateTransactionRequestDtoIntentEnum = exports.CreateTransactionRequestDtoCurrencyEnum = void 0;
exports.instanceOfCreateTransactionRequestDto = instanceOfCreateTransactionRequestDto;
exports.CreateTransactionRequestDtoFromJSON = CreateTransactionRequestDtoFromJSON;
exports.CreateTransactionRequestDtoFromJSONTyped = CreateTransactionRequestDtoFromJSONTyped;
exports.CreateTransactionRequestDtoToJSON = CreateTransactionRequestDtoToJSON;
const runtime_1 = require("../runtime");
const PaymentMethodDto_1 = require("./PaymentMethodDto");
const TagDto_1 = require("./TagDto");
/**
 * @export
 */
exports.CreateTransactionRequestDtoCurrencyEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Aud: 'AUD'
};
/**
 * @export
 */
exports.CreateTransactionRequestDtoIntentEnum = {
    Authorize: 'authorize',
    Capture: 'capture',
    Debit: 'debit'
};
/**
 * @export
 */
exports.CreateTransactionRequestDtoSecCodeEnum = {
    Ppd: 'PPD',
    Ccd: 'CCD',
    Web: 'WEB',
    Tel: 'TEL'
};
/**
 * Check if a given object implements the CreateTransactionRequestDto interface.
 */
function instanceOfCreateTransactionRequestDto(value) {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "paymentMethod" in value;
    isInstance = isInstance && "intent" in value;
    return isInstance;
}
function CreateTransactionRequestDtoFromJSON(json) {
    return CreateTransactionRequestDtoFromJSONTyped(json, false);
}
function CreateTransactionRequestDtoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'amount': json['amount'],
        'currency': json['currency'],
        'paymentMethod': (0, PaymentMethodDto_1.PaymentMethodDtoFromJSON)(json['paymentMethod']),
        'intent': json['intent'],
        'excludeCFee': !(0, runtime_1.exists)(json, 'excludeCFee') ? undefined : json['excludeCFee'],
        'country': !(0, runtime_1.exists)(json, 'country') ? undefined : json['country'],
        'externalTransactionId': !(0, runtime_1.exists)(json, 'externalTransactionId') ? undefined : json['externalTransactionId'],
        'secCode': !(0, runtime_1.exists)(json, 'secCode') ? undefined : json['secCode'],
        'tags': !(0, runtime_1.exists)(json, 'tags') ? undefined : (json['tags'].map(TagDto_1.TagDtoFromJSON)),
    };
    return (0, runtime_1.removeNullUndefined)(typed);
}
function CreateTransactionRequestDtoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': value.amount,
        'currency': value.currency,
        'paymentMethod': (0, PaymentMethodDto_1.PaymentMethodDtoToJSON)(value.paymentMethod),
        'intent': value.intent,
        'excludeCFee': value.excludeCFee,
        'country': value.country,
        'externalTransactionId': value.externalTransactionId,
        'secCode': value.secCode,
        'tags': value.tags === undefined ? undefined : (value.tags.map(TagDto_1.TagDtoToJSON)),
    };
}
