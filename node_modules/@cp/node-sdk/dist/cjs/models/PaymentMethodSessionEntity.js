"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentMethodSessionEntityExpiredReasonEnum = exports.PaymentMethodSessionEntityStatusEnum = void 0;
exports.instanceOfPaymentMethodSessionEntity = instanceOfPaymentMethodSessionEntity;
exports.PaymentMethodSessionEntityFromJSON = PaymentMethodSessionEntityFromJSON;
exports.PaymentMethodSessionEntityFromJSONTyped = PaymentMethodSessionEntityFromJSONTyped;
exports.PaymentMethodSessionEntityToJSON = PaymentMethodSessionEntityToJSON;
const runtime_1 = require("../runtime");
const AuthorizedPaymentInstrumentsEntity_1 = require("./AuthorizedPaymentInstrumentsEntity");
const PaymentMethodSessionAttemptEntity_1 = require("./PaymentMethodSessionAttemptEntity");
/**
 * @export
 */
exports.PaymentMethodSessionEntityStatusEnum = {
    Pending: 'PENDING',
    Expired: 'EXPIRED',
    Completed: 'COMPLETED'
};
/**
 * @export
 */
exports.PaymentMethodSessionEntityExpiredReasonEnum = {
    Timeout: 'TIMEOUT',
    MaxAttempts: 'MAX_ATTEMPTS',
    UserCancelled: 'USER_CANCELLED'
};
/**
 * Check if a given object implements the PaymentMethodSessionEntity interface.
 */
function instanceOfPaymentMethodSessionEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "sessionId" in value;
    isInstance = isInstance && "merchantId" in value;
    isInstance = isInstance && "attempts" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "origin" in value;
    isInstance = isInstance && "expiresAt" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "deleted" in value;
    isInstance = isInstance && "url" in value;
    return isInstance;
}
function PaymentMethodSessionEntityFromJSON(json) {
    return PaymentMethodSessionEntityFromJSONTyped(json, false);
}
function PaymentMethodSessionEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'sessionId': json['sessionId'],
        'merchantId': json['merchantId'],
        'attempts': (json['attempts'].map(PaymentMethodSessionAttemptEntity_1.PaymentMethodSessionAttemptEntityFromJSON)),
        'status': json['status'],
        'origin': json['origin'],
        'expiresAt': (new Date(json['expiresAt'])),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deleted': json['deleted'],
        'sessionToken': !(0, runtime_1.exists)(json, 'sessionToken') ? undefined : json['sessionToken'],
        'authorizedPaymentInstruments': !(0, runtime_1.exists)(json, 'authorizedPaymentInstruments') ? undefined : (0, AuthorizedPaymentInstrumentsEntity_1.AuthorizedPaymentInstrumentsEntityFromJSON)(json['authorizedPaymentInstruments']),
        'paymentMethodId': !(0, runtime_1.exists)(json, 'paymentMethodId') ? undefined : json['paymentMethodId'],
        'buyerId': !(0, runtime_1.exists)(json, 'buyerId') ? undefined : json['buyerId'],
        'externalBuyerId': !(0, runtime_1.exists)(json, 'externalBuyerId') ? undefined : json['externalBuyerId'],
        'expiredReason': !(0, runtime_1.exists)(json, 'expiredReason') ? undefined : json['expiredReason'],
        'expiredAt': !(0, runtime_1.exists)(json, 'expiredAt') ? undefined : (new Date(json['expiredAt'])),
        'completedAt': !(0, runtime_1.exists)(json, 'completedAt') ? undefined : (new Date(json['completedAt'])),
        'deletedAt': !(0, runtime_1.exists)(json, 'deletedAt') ? undefined : (new Date(json['deletedAt'])),
        'url': json['url'],
    };
    return (0, runtime_1.removeNullUndefined)(typed);
}
function PaymentMethodSessionEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'sessionId': value.sessionId,
        'merchantId': value.merchantId,
        'attempts': (value.attempts.map(PaymentMethodSessionAttemptEntity_1.PaymentMethodSessionAttemptEntityToJSON)),
        'status': value.status,
        'origin': value.origin,
        'expiresAt': (value.expiresAt.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'deleted': value.deleted,
        'sessionToken': value.sessionToken,
        'authorizedPaymentInstruments': (0, AuthorizedPaymentInstrumentsEntity_1.AuthorizedPaymentInstrumentsEntityToJSON)(value.authorizedPaymentInstruments),
        'paymentMethodId': value.paymentMethodId,
        'buyerId': value.buyerId,
        'externalBuyerId': value.externalBuyerId,
        'expiredReason': value.expiredReason,
        'expiredAt': value.expiredAt === undefined ? undefined : (value.expiredAt.toISOString()),
        'completedAt': value.completedAt === undefined ? undefined : (value.completedAt.toISOString()),
        'deletedAt': value.deletedAt === undefined ? undefined : (value.deletedAt.toISOString()),
        'url': value.url,
    };
}
