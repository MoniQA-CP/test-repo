"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionPaymentMethodEntityCurrencyEnum = exports.SessionPaymentMethodEntityMethodEnum = exports.SessionPaymentMethodEntityStatusEnum = void 0;
exports.instanceOfSessionPaymentMethodEntity = instanceOfSessionPaymentMethodEntity;
exports.SessionPaymentMethodEntityFromJSON = SessionPaymentMethodEntityFromJSON;
exports.SessionPaymentMethodEntityFromJSONTyped = SessionPaymentMethodEntityFromJSONTyped;
exports.SessionPaymentMethodEntityToJSON = SessionPaymentMethodEntityToJSON;
const runtime_1 = require("../runtime");
const BankDetailsServiceEntity_1 = require("./BankDetailsServiceEntity");
const BillingDetailsEntity_1 = require("./BillingDetailsEntity");
const BuyerEntity_1 = require("./BuyerEntity");
const CardDetailsServiceEntity_1 = require("./CardDetailsServiceEntity");
const ConnectorServiceTokenEntity_1 = require("./ConnectorServiceTokenEntity");
/**
 * @export
 */
exports.SessionPaymentMethodEntityStatusEnum = {
    Processing: 'processing',
    ApprovalRequired: 'approvalRequired',
    Succeeded: 'succeeded',
    Failed: 'failed',
    Expired: 'expired'
};
/**
 * @export
 */
exports.SessionPaymentMethodEntityMethodEnum = {
    Card: 'CARD',
    Bank: 'BANK'
};
/**
 * @export
 */
exports.SessionPaymentMethodEntityCurrencyEnum = {
    Usd: 'USD'
};
/**
 * Check if a given object implements the SessionPaymentMethodEntity interface.
 */
function instanceOfSessionPaymentMethodEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "paymentMethodId" in value;
    isInstance = isInstance && "merchantId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "method" in value;
    return isInstance;
}
function SessionPaymentMethodEntityFromJSON(json) {
    return SessionPaymentMethodEntityFromJSONTyped(json, false);
}
function SessionPaymentMethodEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'id': json['id'],
        'paymentMethodId': json['paymentMethodId'],
        'merchantId': json['merchantId'],
        'status': json['status'],
        'method': json['method'],
        'externalPaymentMethodId': !(0, runtime_1.exists)(json, 'externalPaymentMethodId') ? undefined : json['externalPaymentMethodId'],
        'connectorServiceTokens': !(0, runtime_1.exists)(json, 'connectorServiceTokens') ? undefined : (0, ConnectorServiceTokenEntity_1.ConnectorServiceTokenEntityFromJSON)(json['connectorServiceTokens']),
        'currency': !(0, runtime_1.exists)(json, 'currency') ? undefined : json['currency'],
        'countryCode': !(0, runtime_1.exists)(json, 'countryCode') ? undefined : json['countryCode'],
        'cardDetails': !(0, runtime_1.exists)(json, 'cardDetails') ? undefined : (0, CardDetailsServiceEntity_1.CardDetailsServiceEntityFromJSON)(json['cardDetails']),
        'accountDetails': !(0, runtime_1.exists)(json, 'accountDetails') ? undefined : (0, BankDetailsServiceEntity_1.BankDetailsServiceEntityFromJSON)(json['accountDetails']),
        'buyer': !(0, runtime_1.exists)(json, 'buyer') ? undefined : (0, BuyerEntity_1.BuyerEntityFromJSON)(json['buyer']),
        'buyerId': !(0, runtime_1.exists)(json, 'buyerId') ? undefined : json['buyerId'],
        'externalBuyerId': !(0, runtime_1.exists)(json, 'externalBuyerId') ? undefined : json['externalBuyerId'],
        'createdAt': !(0, runtime_1.exists)(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !(0, runtime_1.exists)(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'paymentMethodCreatedAt': !(0, runtime_1.exists)(json, 'paymentMethodCreatedAt') ? undefined : (new Date(json['paymentMethodCreatedAt'])),
        'paymentMethodUpdatedAt': !(0, runtime_1.exists)(json, 'paymentMethodUpdatedAt') ? undefined : (new Date(json['paymentMethodUpdatedAt'])),
        'paymentMethodIntegrationId': !(0, runtime_1.exists)(json, 'paymentMethodIntegrationId') ? undefined : json['paymentMethodIntegrationId'],
        'billingDetails': !(0, runtime_1.exists)(json, 'billingDetails') ? undefined : (0, BillingDetailsEntity_1.BillingDetailsEntityFromJSON)(json['billingDetails']),
        'isCustomerStored': !(0, runtime_1.exists)(json, 'isCustomerStored') ? undefined : json['isCustomerStored'],
    };
    return (0, runtime_1.removeNullUndefined)(typed);
}
function SessionPaymentMethodEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'paymentMethodId': value.paymentMethodId,
        'merchantId': value.merchantId,
        'status': value.status,
        'method': value.method,
        'externalPaymentMethodId': value.externalPaymentMethodId,
        'connectorServiceTokens': (0, ConnectorServiceTokenEntity_1.ConnectorServiceTokenEntityToJSON)(value.connectorServiceTokens),
        'currency': value.currency,
        'countryCode': value.countryCode,
        'cardDetails': (0, CardDetailsServiceEntity_1.CardDetailsServiceEntityToJSON)(value.cardDetails),
        'accountDetails': (0, BankDetailsServiceEntity_1.BankDetailsServiceEntityToJSON)(value.accountDetails),
        'buyer': (0, BuyerEntity_1.BuyerEntityToJSON)(value.buyer),
        'buyerId': value.buyerId,
        'externalBuyerId': value.externalBuyerId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'paymentMethodCreatedAt': value.paymentMethodCreatedAt === undefined ? undefined : (value.paymentMethodCreatedAt.toISOString()),
        'paymentMethodUpdatedAt': value.paymentMethodUpdatedAt === undefined ? undefined : (value.paymentMethodUpdatedAt.toISOString()),
        'paymentMethodIntegrationId': value.paymentMethodIntegrationId,
        'billingDetails': (0, BillingDetailsEntity_1.BillingDetailsEntityToJSON)(value.billingDetails),
        'isCustomerStored': value.isCustomerStored,
    };
}
