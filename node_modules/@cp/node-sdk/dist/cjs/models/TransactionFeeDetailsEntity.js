"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionFeeDetailsEntityStatusEnum = exports.TransactionFeeDetailsEntityChargeTypeEnum = exports.TransactionFeeDetailsEntityTypeEnum = exports.TransactionFeeDetailsEntityCurrencyEnum = void 0;
exports.instanceOfTransactionFeeDetailsEntity = instanceOfTransactionFeeDetailsEntity;
exports.TransactionFeeDetailsEntityFromJSON = TransactionFeeDetailsEntityFromJSON;
exports.TransactionFeeDetailsEntityFromJSONTyped = TransactionFeeDetailsEntityFromJSONTyped;
exports.TransactionFeeDetailsEntityToJSON = TransactionFeeDetailsEntityToJSON;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.TransactionFeeDetailsEntityCurrencyEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Aud: 'AUD'
};
/**
 * @export
 */
exports.TransactionFeeDetailsEntityTypeEnum = {
    ConvenienceFee: 'CONVENIENCE_FEE'
};
/**
 * @export
 */
exports.TransactionFeeDetailsEntityChargeTypeEnum = {
    IncludedInAmount: 'INCLUDED_IN_AMOUNT',
    ChargedSeparately: 'CHARGED_SEPARATELY'
};
/**
 * @export
 */
exports.TransactionFeeDetailsEntityStatusEnum = {
    Processing: 'PROCESSING',
    Processed: 'PROCESSED'
};
/**
 * Check if a given object implements the TransactionFeeDetailsEntity interface.
 */
function instanceOfTransactionFeeDetailsEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "type" in value;
    return isInstance;
}
function TransactionFeeDetailsEntityFromJSON(json) {
    return TransactionFeeDetailsEntityFromJSONTyped(json, false);
}
function TransactionFeeDetailsEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'amount': json['amount'],
        'currency': !(0, runtime_1.exists)(json, 'currency') ? undefined : json['currency'],
        'type': json['type'],
        'chargeType': !(0, runtime_1.exists)(json, 'chargeType') ? undefined : json['chargeType'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : json['status'],
        'transactionId': !(0, runtime_1.exists)(json, 'transactionId') ? undefined : json['transactionId'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
    };
    return (0, runtime_1.removeNullUndefined)(typed);
}
function TransactionFeeDetailsEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': value.amount,
        'currency': value.currency,
        'type': value.type,
        'chargeType': value.chargeType,
        'status': value.status,
        'transactionId': value.transactionId,
        'description': value.description,
    };
}
