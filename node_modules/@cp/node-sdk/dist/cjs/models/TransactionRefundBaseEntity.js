"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionRefundBaseEntityStatusEnum = void 0;
exports.instanceOfTransactionRefundBaseEntity = instanceOfTransactionRefundBaseEntity;
exports.TransactionRefundBaseEntityFromJSON = TransactionRefundBaseEntityFromJSON;
exports.TransactionRefundBaseEntityFromJSONTyped = TransactionRefundBaseEntityFromJSONTyped;
exports.TransactionRefundBaseEntityToJSON = TransactionRefundBaseEntityToJSON;
const runtime_1 = require("../runtime");
const TransactionNoteEntity_1 = require("./TransactionNoteEntity");
/**
 * @export
 */
exports.TransactionRefundBaseEntityStatusEnum = {
    Processing: 'processing',
    Succeeded: 'succeeded',
    Declined: 'declined',
    Failed: 'failed',
    Voided: 'voided',
    Hold: 'hold',
    Submitted: 'submitted',
    Transmitted: 'transmitted',
    Settled: 'settled',
    Returned: 'returned'
};
/**
 * Check if a given object implements the TransactionRefundBaseEntity interface.
 */
function instanceOfTransactionRefundBaseEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "merchantId" in value;
    isInstance = isInstance && "refundId" in value;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "refundedAmount" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "status" in value;
    return isInstance;
}
function TransactionRefundBaseEntityFromJSON(json) {
    return TransactionRefundBaseEntityFromJSONTyped(json, false);
}
function TransactionRefundBaseEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'merchantId': json['merchantId'],
        'refundId': json['refundId'],
        'transactionId': json['transactionId'],
        'refundTransactionId': !(0, runtime_1.exists)(json, 'refundTransactionId') ? undefined : json['refundTransactionId'],
        'refundedAmount': json['refundedAmount'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'status': json['status'],
        'reason': !(0, runtime_1.exists)(json, 'reason') ? undefined : json['reason'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'currency': !(0, runtime_1.exists)(json, 'currency') ? undefined : json['currency'],
        'notes': !(0, runtime_1.exists)(json, 'notes') ? undefined : (json['notes'].map(TransactionNoteEntity_1.TransactionNoteEntityFromJSON)),
    };
    return (0, runtime_1.removeNullUndefined)(typed);
}
function TransactionRefundBaseEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'merchantId': value.merchantId,
        'refundId': value.refundId,
        'transactionId': value.transactionId,
        'refundTransactionId': value.refundTransactionId,
        'refundedAmount': value.refundedAmount,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'status': value.status,
        'reason': value.reason,
        'description': value.description,
        'currency': value.currency,
        'notes': value.notes === undefined ? undefined : (value.notes.map(TransactionNoteEntity_1.TransactionNoteEntityToJSON)),
    };
}
