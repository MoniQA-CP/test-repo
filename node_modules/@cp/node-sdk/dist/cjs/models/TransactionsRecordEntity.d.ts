/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
/**
 *
 * @export
 * @interface TransactionsRecordEntity
 */
export interface TransactionsRecordEntity {
    /**
     * The merchant ID for this transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    merchantId: string;
    /**
     * The transaction creation date.
     * @type {Date}
     * @memberof TransactionsRecordEntity
     */
    createdAt: Date;
    /**
     * The transaction ID.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    transactionId: string;
    /**
     * Indicate the current status for this transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    status: TransactionsRecordEntityStatusEnum;
    /**
     * The transaction amount in cents.
     * @type {number}
     * @memberof TransactionsRecordEntity
     */
    amount: number;
    /**
     * Indicate the payment method used for this transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    paymentMethod: TransactionsRecordEntityPaymentMethodEnum;
    /**
     * Indicate the account type used for this transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    accountType?: TransactionsRecordEntityAccountTypeEnum;
    /**
     * The external transaction ID of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    externalTransactionId?: string;
    /**
     * The net amount of the transaction.
     * @type {number}
     * @memberof TransactionsRecordEntity
     */
    netAmount: number;
    /**
     * The fee of the transaction.
     * @type {number}
     * @memberof TransactionsRecordEntity
     */
    fee: number;
    /**
     * The intent of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    intent: TransactionsRecordEntityIntentEnum;
    /**
     * The captured date of the transaction.
     * @type {Date}
     * @memberof TransactionsRecordEntity
     */
    capturedAt?: Date;
    /**
     * The authorized date of the card transaction.
     * @type {Date}
     * @memberof TransactionsRecordEntity
     */
    authorizedAt?: Date;
    /**
     * The rejected date of the ACH transaction.
     * @type {Date}
     * @memberof TransactionsRecordEntity
     */
    rejectedAt?: Date;
    /**
     * The returned date of the ACH transaction.
     * @type {Date}
     * @memberof TransactionsRecordEntity
     */
    returnedAt?: Date;
    /**
     * The settled date of the ACH transaction.
     * @type {Date}
     * @memberof TransactionsRecordEntity
     */
    settledAt?: Date;
    /**
     * The updated date of the transaction.
     * @type {Date}
     * @memberof TransactionsRecordEntity
     */
    updatedAt?: Date;
    /**
     * The voided date of the card or ACH transaction.
     * @type {Date}
     * @memberof TransactionsRecordEntity
     */
    voidedAt?: Date;
    /**
     * The captured amount of the transaction.
     * @type {number}
     * @memberof TransactionsRecordEntity
     */
    capturedAmount?: number;
    /**
     * The refunded amount of the transaction.
     * @type {number}
     * @memberof TransactionsRecordEntity
     */
    refundedAmount?: number;
    /**
     * The currency of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    currency: TransactionsRecordEntityCurrencyEnum;
    /**
     * The country of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    country: string;
    /**
     * The buyer ID of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    buyerId?: string;
    /**
     * The external buyer ID of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    externalBuyerId?: string;
    /**
     * The card type.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    cardType?: TransactionsRecordEntityCardTypeEnum;
    /**
     * The last 4 of the card number.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    label?: string;
    /**
     * The scheme of the payment method.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    scheme?: string;
    /**
     * The expiration date of the payment method.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    expirationDate?: string;
    /**
     * The account holder name of the payment method.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    accountHolderName?: string;
    /**
     * The raw response code of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    rawResponseCode?: string;
    /**
     * The raw response description of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    rawResponseDescription?: string;
    /**
     * The AVS response code of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    avsResponseCode?: string;
    /**
     * The CVV response code of the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    cvvResponseCode?: string;
    /**
     * The session ID.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    sessionId?: string;
    /**
     * The account number last digits.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    accountEnding?: string;
    /**
     * Descriptive labels or keywords that can be assigned to the transaction.
     * @type {string}
     * @memberof TransactionsRecordEntity
     */
    tags?: string;
}
/**
 * @export
 */
export declare const TransactionsRecordEntityStatusEnum: {
    readonly Processing: "processing";
    readonly BuyerApprovalPending: "buyerApprovalPending";
    readonly Authorized: "authorized";
    readonly AuthorizationFailed: "authorizationFailed";
    readonly CaptureFailed: "captureFailed";
    readonly Declined: "declined";
    readonly CapturePending: "capturePending";
    readonly Captured: "captured";
    readonly VoidPending: "voidPending";
    readonly Voided: "voided";
    readonly Hold: "hold";
    readonly Submitted: "submitted";
    readonly Transmitted: "transmitted";
    readonly Settled: "settled";
    readonly Returned: "returned";
    readonly Rejected: "rejected";
};
export type TransactionsRecordEntityStatusEnum = typeof TransactionsRecordEntityStatusEnum[keyof typeof TransactionsRecordEntityStatusEnum];
/**
 * @export
 */
export declare const TransactionsRecordEntityPaymentMethodEnum: {
    readonly Ach: "ACH";
    readonly Bank: "BANK";
    readonly Card: "CARD";
};
export type TransactionsRecordEntityPaymentMethodEnum = typeof TransactionsRecordEntityPaymentMethodEnum[keyof typeof TransactionsRecordEntityPaymentMethodEnum];
/**
 * @export
 */
export declare const TransactionsRecordEntityAccountTypeEnum: {
    readonly Checking: "CHECKING";
    readonly Savings: "SAVINGS";
};
export type TransactionsRecordEntityAccountTypeEnum = typeof TransactionsRecordEntityAccountTypeEnum[keyof typeof TransactionsRecordEntityAccountTypeEnum];
/**
 * @export
 */
export declare const TransactionsRecordEntityIntentEnum: {
    readonly Capture: "capture";
    readonly Authorize: "authorize";
    readonly Debit: "debit";
    readonly Credit: "credit";
};
export type TransactionsRecordEntityIntentEnum = typeof TransactionsRecordEntityIntentEnum[keyof typeof TransactionsRecordEntityIntentEnum];
/**
 * @export
 */
export declare const TransactionsRecordEntityCurrencyEnum: {
    readonly Usd: "USD";
    readonly Cad: "CAD";
    readonly Aud: "AUD";
};
export type TransactionsRecordEntityCurrencyEnum = typeof TransactionsRecordEntityCurrencyEnum[keyof typeof TransactionsRecordEntityCurrencyEnum];
/**
 * @export
 */
export declare const TransactionsRecordEntityCardTypeEnum: {
    readonly Credit: "CREDIT";
    readonly Debit: "DEBIT";
    readonly Prepaid: "PREPAID";
};
export type TransactionsRecordEntityCardTypeEnum = typeof TransactionsRecordEntityCardTypeEnum[keyof typeof TransactionsRecordEntityCardTypeEnum];
/**
 * Check if a given object implements the TransactionsRecordEntity interface.
 */
export declare function instanceOfTransactionsRecordEntity(value: object): boolean;
export declare function TransactionsRecordEntityFromJSON(json: any): TransactionsRecordEntity;
export declare function TransactionsRecordEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionsRecordEntity;
export declare function TransactionsRecordEntityToJSON(value?: TransactionsRecordEntity | null): any;
