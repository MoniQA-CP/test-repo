"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionsRecordEntityCardTypeEnum = exports.TransactionsRecordEntityCurrencyEnum = exports.TransactionsRecordEntityIntentEnum = exports.TransactionsRecordEntityAccountTypeEnum = exports.TransactionsRecordEntityPaymentMethodEnum = exports.TransactionsRecordEntityStatusEnum = void 0;
exports.instanceOfTransactionsRecordEntity = instanceOfTransactionsRecordEntity;
exports.TransactionsRecordEntityFromJSON = TransactionsRecordEntityFromJSON;
exports.TransactionsRecordEntityFromJSONTyped = TransactionsRecordEntityFromJSONTyped;
exports.TransactionsRecordEntityToJSON = TransactionsRecordEntityToJSON;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.TransactionsRecordEntityStatusEnum = {
    Processing: 'processing',
    BuyerApprovalPending: 'buyerApprovalPending',
    Authorized: 'authorized',
    AuthorizationFailed: 'authorizationFailed',
    CaptureFailed: 'captureFailed',
    Declined: 'declined',
    CapturePending: 'capturePending',
    Captured: 'captured',
    VoidPending: 'voidPending',
    Voided: 'voided',
    Hold: 'hold',
    Submitted: 'submitted',
    Transmitted: 'transmitted',
    Settled: 'settled',
    Returned: 'returned',
    Rejected: 'rejected'
};
/**
 * @export
 */
exports.TransactionsRecordEntityPaymentMethodEnum = {
    Ach: 'ACH',
    Bank: 'BANK',
    Card: 'CARD'
};
/**
 * @export
 */
exports.TransactionsRecordEntityAccountTypeEnum = {
    Checking: 'CHECKING',
    Savings: 'SAVINGS'
};
/**
 * @export
 */
exports.TransactionsRecordEntityIntentEnum = {
    Capture: 'capture',
    Authorize: 'authorize',
    Debit: 'debit',
    Credit: 'credit'
};
/**
 * @export
 */
exports.TransactionsRecordEntityCurrencyEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Aud: 'AUD'
};
/**
 * @export
 */
exports.TransactionsRecordEntityCardTypeEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Prepaid: 'PREPAID'
};
/**
 * Check if a given object implements the TransactionsRecordEntity interface.
 */
function instanceOfTransactionsRecordEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "merchantId" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "paymentMethod" in value;
    isInstance = isInstance && "netAmount" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "intent" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "country" in value;
    return isInstance;
}
function TransactionsRecordEntityFromJSON(json) {
    return TransactionsRecordEntityFromJSONTyped(json, false);
}
function TransactionsRecordEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'merchantId': json['merchantId'],
        'createdAt': (new Date(json['createdAt'])),
        'transactionId': json['transactionId'],
        'status': json['status'],
        'amount': json['amount'],
        'paymentMethod': json['paymentMethod'],
        'accountType': !(0, runtime_1.exists)(json, 'accountType') ? undefined : json['accountType'],
        'externalTransactionId': !(0, runtime_1.exists)(json, 'externalTransactionId') ? undefined : json['externalTransactionId'],
        'netAmount': json['netAmount'],
        'fee': json['fee'],
        'intent': json['intent'],
        'capturedAt': !(0, runtime_1.exists)(json, 'capturedAt') ? undefined : (new Date(json['capturedAt'])),
        'authorizedAt': !(0, runtime_1.exists)(json, 'authorizedAt') ? undefined : (new Date(json['authorizedAt'])),
        'rejectedAt': !(0, runtime_1.exists)(json, 'rejectedAt') ? undefined : (new Date(json['rejectedAt'])),
        'returnedAt': !(0, runtime_1.exists)(json, 'returnedAt') ? undefined : (new Date(json['returnedAt'])),
        'settledAt': !(0, runtime_1.exists)(json, 'settledAt') ? undefined : (new Date(json['settledAt'])),
        'updatedAt': !(0, runtime_1.exists)(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'voidedAt': !(0, runtime_1.exists)(json, 'voidedAt') ? undefined : (new Date(json['voidedAt'])),
        'capturedAmount': !(0, runtime_1.exists)(json, 'capturedAmount') ? undefined : json['capturedAmount'],
        'refundedAmount': !(0, runtime_1.exists)(json, 'refundedAmount') ? undefined : json['refundedAmount'],
        'currency': json['currency'],
        'country': json['country'],
        'buyerId': !(0, runtime_1.exists)(json, 'buyerId') ? undefined : json['buyerId'],
        'externalBuyerId': !(0, runtime_1.exists)(json, 'externalBuyerId') ? undefined : json['externalBuyerId'],
        'cardType': !(0, runtime_1.exists)(json, 'cardType') ? undefined : json['cardType'],
        'label': !(0, runtime_1.exists)(json, 'label') ? undefined : json['label'],
        'scheme': !(0, runtime_1.exists)(json, 'scheme') ? undefined : json['scheme'],
        'expirationDate': !(0, runtime_1.exists)(json, 'expirationDate') ? undefined : json['expirationDate'],
        'accountHolderName': !(0, runtime_1.exists)(json, 'accountHolderName') ? undefined : json['accountHolderName'],
        'rawResponseCode': !(0, runtime_1.exists)(json, 'rawResponseCode') ? undefined : json['rawResponseCode'],
        'rawResponseDescription': !(0, runtime_1.exists)(json, 'rawResponseDescription') ? undefined : json['rawResponseDescription'],
        'avsResponseCode': !(0, runtime_1.exists)(json, 'avsResponseCode') ? undefined : json['avsResponseCode'],
        'cvvResponseCode': !(0, runtime_1.exists)(json, 'cvvResponseCode') ? undefined : json['cvvResponseCode'],
        'sessionId': !(0, runtime_1.exists)(json, 'sessionId') ? undefined : json['sessionId'],
        'accountEnding': !(0, runtime_1.exists)(json, 'accountEnding') ? undefined : json['accountEnding'],
        'tags': !(0, runtime_1.exists)(json, 'tags') ? undefined : json['tags'],
    };
    return (0, runtime_1.removeNullUndefined)(typed);
}
function TransactionsRecordEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'merchantId': value.merchantId,
        'createdAt': (value.createdAt.toISOString()),
        'transactionId': value.transactionId,
        'status': value.status,
        'amount': value.amount,
        'paymentMethod': value.paymentMethod,
        'accountType': value.accountType,
        'externalTransactionId': value.externalTransactionId,
        'netAmount': value.netAmount,
        'fee': value.fee,
        'intent': value.intent,
        'capturedAt': value.capturedAt === undefined ? undefined : (value.capturedAt.toISOString()),
        'authorizedAt': value.authorizedAt === undefined ? undefined : (value.authorizedAt.toISOString()),
        'rejectedAt': value.rejectedAt === undefined ? undefined : (value.rejectedAt.toISOString()),
        'returnedAt': value.returnedAt === undefined ? undefined : (value.returnedAt.toISOString()),
        'settledAt': value.settledAt === undefined ? undefined : (value.settledAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'voidedAt': value.voidedAt === undefined ? undefined : (value.voidedAt.toISOString()),
        'capturedAmount': value.capturedAmount,
        'refundedAmount': value.refundedAmount,
        'currency': value.currency,
        'country': value.country,
        'buyerId': value.buyerId,
        'externalBuyerId': value.externalBuyerId,
        'cardType': value.cardType,
        'label': value.label,
        'scheme': value.scheme,
        'expirationDate': value.expirationDate,
        'accountHolderName': value.accountHolderName,
        'rawResponseCode': value.rawResponseCode,
        'rawResponseDescription': value.rawResponseDescription,
        'avsResponseCode': value.avsResponseCode,
        'cvvResponseCode': value.cvvResponseCode,
        'sessionId': value.sessionId,
        'accountEnding': value.accountEnding,
        'tags': value.tags,
    };
}
