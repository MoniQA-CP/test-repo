"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionsReportScheduleEntityDateRangeEnum = exports.TransactionsReportScheduleEntityIntervalEnum = exports.TransactionsReportScheduleEntityOrderEnum = void 0;
exports.instanceOfTransactionsReportScheduleEntity = instanceOfTransactionsReportScheduleEntity;
exports.TransactionsReportScheduleEntityFromJSON = TransactionsReportScheduleEntityFromJSON;
exports.TransactionsReportScheduleEntityFromJSONTyped = TransactionsReportScheduleEntityFromJSONTyped;
exports.TransactionsReportScheduleEntityToJSON = TransactionsReportScheduleEntityToJSON;
const runtime_1 = require("../runtime");
const ReportCreatorEntity_1 = require("./ReportCreatorEntity");
const TransactionsReportsFiltersEntity_1 = require("./TransactionsReportsFiltersEntity");
/**
 * @export
 */
exports.TransactionsReportScheduleEntityOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.TransactionsReportScheduleEntityIntervalEnum = {
    Daily: 'DAILY',
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY'
};
/**
 * @export
 */
exports.TransactionsReportScheduleEntityDateRangeEnum = {
    Today: 'TODAY',
    Yesterday: 'YESTERDAY',
    Last7Days: 'LAST_7_DAYS',
    Last30Days: 'LAST_30_DAYS',
    Last60Days: 'LAST_60_DAYS',
    Last90Days: 'LAST_90_DAYS',
    LastWeek: 'LAST_WEEK',
    LastMonth: 'LAST_MONTH',
    LastQuarter: 'LAST_QUARTER',
    LastYear: 'LAST_YEAR',
    Custom: 'CUSTOM'
};
/**
 * Check if a given object implements the TransactionsReportScheduleEntity interface.
 */
function instanceOfTransactionsReportScheduleEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "reportScheduleId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "merchantId" in value;
    isInstance = isInstance && "interval" in value;
    isInstance = isInstance && "dateRange" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "endTime" in value;
    isInstance = isInstance && "recipients" in value;
    isInstance = isInstance && "nextRun" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "columns" in value;
    isInstance = isInstance && "transactionsFilters" in value;
    return isInstance;
}
function TransactionsReportScheduleEntityFromJSON(json) {
    return TransactionsReportScheduleEntityFromJSONTyped(json, false);
}
function TransactionsReportScheduleEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'reportScheduleId': json['reportScheduleId'],
        'name': json['name'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'order': !(0, runtime_1.exists)(json, 'order') ? undefined : json['order'],
        'createdBy': (0, ReportCreatorEntity_1.ReportCreatorEntityFromJSON)(json['createdBy']),
        'deletedBy': !(0, runtime_1.exists)(json, 'deletedBy') ? undefined : (0, ReportCreatorEntity_1.ReportCreatorEntityFromJSON)(json['deletedBy']),
        'merchantId': json['merchantId'],
        'interval': json['interval'],
        'dateRange': json['dateRange'],
        'startTime': json['startTime'],
        'endTime': json['endTime'],
        'recipients': json['recipients'],
        'lastRun': !(0, runtime_1.exists)(json, 'lastRun') ? undefined : (new Date(json['lastRun'])),
        'nextRun': (new Date(json['nextRun'])),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deleted': !(0, runtime_1.exists)(json, 'deleted') ? undefined : json['deleted'],
        'deletedAt': !(0, runtime_1.exists)(json, 'deletedAt') ? undefined : (new Date(json['deletedAt'])),
        'columns': json['columns'],
        'transactionsFilters': (0, TransactionsReportsFiltersEntity_1.TransactionsReportsFiltersEntityFromJSON)(json['transactionsFilters']),
    };
    return (0, runtime_1.removeNullUndefined)(typed);
}
function TransactionsReportScheduleEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reportScheduleId': value.reportScheduleId,
        'name': value.name,
        'description': value.description,
        'order': value.order,
        'createdBy': (0, ReportCreatorEntity_1.ReportCreatorEntityToJSON)(value.createdBy),
        'deletedBy': (0, ReportCreatorEntity_1.ReportCreatorEntityToJSON)(value.deletedBy),
        'merchantId': value.merchantId,
        'interval': value.interval,
        'dateRange': value.dateRange,
        'startTime': value.startTime,
        'endTime': value.endTime,
        'recipients': value.recipients,
        'lastRun': value.lastRun === undefined ? undefined : (value.lastRun.toISOString()),
        'nextRun': (value.nextRun.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'deleted': value.deleted,
        'deletedAt': value.deletedAt === undefined ? undefined : (value.deletedAt.toISOString()),
        'columns': value.columns,
        'transactionsFilters': (0, TransactionsReportsFiltersEntity_1.TransactionsReportsFiltersEntityToJSON)(value.transactionsFilters),
    };
}
