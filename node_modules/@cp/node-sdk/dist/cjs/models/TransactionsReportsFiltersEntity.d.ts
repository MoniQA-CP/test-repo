/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
/**
 *
 * @export
 * @interface TransactionsReportsFiltersEntity
 */
export interface TransactionsReportsFiltersEntity {
    /**
     * Indicate the resource used for this report template.
     * @type {Array<string>}
     * @memberof TransactionsReportsFiltersEntity
     */
    paymentMethods: Array<TransactionsReportsFiltersEntityPaymentMethodsEnum>;
    /**
     * Indicate the resource used for this report template.
     * @type {Array<string>}
     * @memberof TransactionsReportsFiltersEntity
     */
    accountTypes?: Array<TransactionsReportsFiltersEntityAccountTypesEnum>;
    /**
     * Indicate the resource used for this report template.
     * @type {Array<string>}
     * @memberof TransactionsReportsFiltersEntity
     */
    cardTypes?: Array<TransactionsReportsFiltersEntityCardTypesEnum>;
    /**
     * Indicate the resource used for this report template.
     * @type {Array<string>}
     * @memberof TransactionsReportsFiltersEntity
     */
    cardSchemes?: Array<TransactionsReportsFiltersEntityCardSchemesEnum>;
    /**
     * Indicate the resource used for this report template.
     * @type {Array<string>}
     * @memberof TransactionsReportsFiltersEntity
     */
    transactionIntents?: Array<TransactionsReportsFiltersEntityTransactionIntentsEnum>;
    /**
     * Indicate the resource used for this report template.
     * @type {Array<string>}
     * @memberof TransactionsReportsFiltersEntity
     */
    transactionStatuses?: Array<TransactionsReportsFiltersEntityTransactionStatusesEnum>;
    /**
     * The amount of the transaction for this report.
     * @type {number}
     * @memberof TransactionsReportsFiltersEntity
     */
    amount?: number;
    /**
     * Amount greater than a specified threshold for this report.
     * @type {number}
     * @memberof TransactionsReportsFiltersEntity
     */
    amountGreaterThan?: number;
    /**
     * Amount less than a specified threshold for this report.
     * @type {number}
     * @memberof TransactionsReportsFiltersEntity
     */
    amountLessThan?: number;
    /**
     * The min amount for a specified range in this report.
     * @type {number}
     * @memberof TransactionsReportsFiltersEntity
     */
    amountMin?: number;
    /**
     * The max amount for a specified range in this report.
     * @type {number}
     * @memberof TransactionsReportsFiltersEntity
     */
    amountMax?: number;
}
/**
 * @export
 */
export declare const TransactionsReportsFiltersEntityPaymentMethodsEnum: {
    readonly Card: "CARD";
    readonly Bank: "BANK";
};
export type TransactionsReportsFiltersEntityPaymentMethodsEnum = typeof TransactionsReportsFiltersEntityPaymentMethodsEnum[keyof typeof TransactionsReportsFiltersEntityPaymentMethodsEnum];
/**
 * @export
 */
export declare const TransactionsReportsFiltersEntityAccountTypesEnum: {
    readonly Checking: "CHECKING";
    readonly Savings: "SAVINGS";
};
export type TransactionsReportsFiltersEntityAccountTypesEnum = typeof TransactionsReportsFiltersEntityAccountTypesEnum[keyof typeof TransactionsReportsFiltersEntityAccountTypesEnum];
/**
 * @export
 */
export declare const TransactionsReportsFiltersEntityCardTypesEnum: {
    readonly Credit: "CREDIT";
    readonly Debit: "DEBIT";
    readonly Prepaid: "PREPAID";
};
export type TransactionsReportsFiltersEntityCardTypesEnum = typeof TransactionsReportsFiltersEntityCardTypesEnum[keyof typeof TransactionsReportsFiltersEntityCardTypesEnum];
/**
 * @export
 */
export declare const TransactionsReportsFiltersEntityCardSchemesEnum: {
    readonly Visa: "visa";
    readonly Mastercard: "mastercard";
    readonly Amex: "amex";
    readonly Discover: "discover";
    readonly Jcb: "jcb";
    readonly DinersClub: "diners_club";
    readonly Maestro: "maestro";
};
export type TransactionsReportsFiltersEntityCardSchemesEnum = typeof TransactionsReportsFiltersEntityCardSchemesEnum[keyof typeof TransactionsReportsFiltersEntityCardSchemesEnum];
/**
 * @export
 */
export declare const TransactionsReportsFiltersEntityTransactionIntentsEnum: {
    readonly Capture: "capture";
    readonly Authorize: "authorize";
    readonly Debit: "debit";
    readonly Credit: "credit";
};
export type TransactionsReportsFiltersEntityTransactionIntentsEnum = typeof TransactionsReportsFiltersEntityTransactionIntentsEnum[keyof typeof TransactionsReportsFiltersEntityTransactionIntentsEnum];
/**
 * @export
 */
export declare const TransactionsReportsFiltersEntityTransactionStatusesEnum: {
    readonly Authorized: "authorized";
    readonly AuthorizationFailed: "authorizationFailed";
    readonly Declined: "declined";
    readonly Captured: "captured";
    readonly Voided: "voided";
    readonly Hold: "hold";
    readonly Submitted: "submitted";
    readonly Transmitted: "transmitted";
    readonly Settled: "settled";
    readonly Returned: "returned";
    readonly Rejected: "rejected";
};
export type TransactionsReportsFiltersEntityTransactionStatusesEnum = typeof TransactionsReportsFiltersEntityTransactionStatusesEnum[keyof typeof TransactionsReportsFiltersEntityTransactionStatusesEnum];
/**
 * Check if a given object implements the TransactionsReportsFiltersEntity interface.
 */
export declare function instanceOfTransactionsReportsFiltersEntity(value: object): boolean;
export declare function TransactionsReportsFiltersEntityFromJSON(json: any): TransactionsReportsFiltersEntity;
export declare function TransactionsReportsFiltersEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionsReportsFiltersEntity;
export declare function TransactionsReportsFiltersEntityToJSON(value?: TransactionsReportsFiltersEntity | null): any;
