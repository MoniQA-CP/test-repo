/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import * as runtime from '../runtime';
import { BuyersEntityFromJSON, BuyersSearchEntityFromJSON, CaptureTransactionDtoToJSON, ChangeNotificationEntityFromJSON, ChangeNotificationsSearchEntityFromJSON, CheckoutSessionEntityFromJSON, ConnectorServiceTokenEntityFromJSON, CreateBuyerDtoToJSON, CreateCheckoutSessionDtoToJSON, CreatePaymentMethodDtoToJSON, CreatePaymentMethodSessionDtoToJSON, CreateProvisionedCardTokenDtoToJSON, CreateTransactionRefundDtoToJSON, CreateTransactionRequestDtoToJSON, ErrorEntityFromJSON, MerchantEntityFromJSON, MerchantFeeDetailsEntityFromJSON, PaymentMethodEntityFromJSON, PaymentMethodSessionEntityFromJSON, PaymentMethodsSearchEntityFromJSON, ReturnNotificationEntityFromJSON, ReturnNotificationsSearchEntityFromJSON, TransactionEntityFromJSON, TransactionRefundEntityFromJSON, TransactionRefundsSearchEntityFromJSON, TransactionsSearchEntityFromJSON, UpdateBuyerDtoToJSON, } from '../models';
/**
 *
 */
export class ChannelPaymentsApi extends runtime.BaseAPI {
    /**
     * Attempts to acknowledge a change notification
     * Acknowledge change notification
    */
    async acknowledgeChangeNotification(changeNotificationId) {
        if (changeNotificationId === null || changeNotificationId === undefined) {
            throw new runtime.RequiredError('changeNotificationId', 'Required parameter \'changeNotificationId\' was null or undefined when calling acknowledgeChangeNotification.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/change-notifications/{changeNotificationId}`.replace(`{${"changeNotificationId"}}`, encodeURIComponent(changeNotificationId)),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ChangeNotificationEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ChangeNotificationEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to acknowledge a return notification
     * Acknowledge return notification
    */
    async acknowledgeReturnNotification(returnNotificationId) {
        if (returnNotificationId === null || returnNotificationId === undefined) {
            throw new runtime.RequiredError('returnNotificationId', 'Required parameter \'returnNotificationId\' was null or undefined when calling acknowledgeReturnNotification.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/return-notifications/{returnNotificationId}`.replace(`{${"returnNotificationId"}}`, encodeURIComponent(returnNotificationId)),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ReturnNotificationEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ReturnNotificationEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to capture an authorized transaction
     * Capture transaction
    */
    async captureTransaction(captureTransactionDto, idempotencyKey) {
        if (captureTransactionDto === null || captureTransactionDto === undefined) {
            throw new runtime.RequiredError('captureTransactionDto', 'Required parameter \'captureTransactionDto\' was null or undefined when calling captureTransaction.');
        }
        if (captureTransactionDto.transactionId === null || captureTransactionDto.transactionId === undefined) {
            throw new runtime.RequiredError('captureTransactionDto.transactionId', 'Required parameter \'captureTransactionDto.transactionId\' was null or undefined when calling captureTransaction.');
        }
        if (captureTransactionDto.amount === null || captureTransactionDto.amount === undefined) {
            throw new runtime.RequiredError('captureTransactionDto.amount', 'Required parameter \'captureTransactionDto.amount\' was null or undefined when calling captureTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            headerParameters['Idempotency-Key'] = idempotencyKey;
        }
        const rawResponse = await this.request({
            path: `/transactions/capture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CaptureTransactionDtoToJSON(captureTransactionDto),
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => TransactionEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Creates a new buyer.
     * Create buyer.
    */
    async createBuyer(createBuyerDto) {
        if (createBuyerDto === null || createBuyerDto === undefined) {
            throw new runtime.RequiredError('createBuyerDto', 'Required parameter \'createBuyerDto\' was null or undefined when calling createBuyer.');
        }
        if (createBuyerDto.givenName === null || createBuyerDto.givenName === undefined) {
            throw new runtime.RequiredError('createBuyerDto.givenName', 'Required parameter \'createBuyerDto.givenName\' was null or undefined when calling createBuyer.');
        }
        if (createBuyerDto.familyName === null || createBuyerDto.familyName === undefined) {
            throw new runtime.RequiredError('createBuyerDto.familyName', 'Required parameter \'createBuyerDto.familyName\' was null or undefined when calling createBuyer.');
        }
        if (createBuyerDto.email === null || createBuyerDto.email === undefined) {
            throw new runtime.RequiredError('createBuyerDto.email', 'Required parameter \'createBuyerDto.email\' was null or undefined when calling createBuyer.');
        }
        if (createBuyerDto.address === null || createBuyerDto.address === undefined) {
            throw new runtime.RequiredError('createBuyerDto.address', 'Required parameter \'createBuyerDto.address\' was null or undefined when calling createBuyer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const rawResponse = await this.request({
            path: `/buyers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBuyerDtoToJSON(createBuyerDto),
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => BuyersEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to create a checkout session
     * Create checkout session
    */
    async createCheckoutSession(createCheckoutSessionDto) {
        if (createCheckoutSessionDto === null || createCheckoutSessionDto === undefined) {
            throw new runtime.RequiredError('createCheckoutSessionDto', 'Required parameter \'createCheckoutSessionDto\' was null or undefined when calling createCheckoutSession.');
        }
        if (createCheckoutSessionDto.items === null || createCheckoutSessionDto.items === undefined) {
            throw new runtime.RequiredError('createCheckoutSessionDto.items', 'Required parameter \'createCheckoutSessionDto.items\' was null or undefined when calling createCheckoutSession.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const rawResponse = await this.request({
            path: `/checkout-sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCheckoutSessionDtoToJSON(createCheckoutSessionDto),
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => CheckoutSessionEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Create a new payment method session.
     * Create payment method session.
    */
    async createPaymentMethodSession(createPaymentMethodSessionDto) {
        if (createPaymentMethodSessionDto === null || createPaymentMethodSessionDto === undefined) {
            throw new runtime.RequiredError('createPaymentMethodSessionDto', 'Required parameter \'createPaymentMethodSessionDto\' was null or undefined when calling createPaymentMethodSession.');
        }
        if (createPaymentMethodSessionDto.origin === null || createPaymentMethodSessionDto.origin === undefined) {
            throw new runtime.RequiredError('createPaymentMethodSessionDto.origin', 'Required parameter \'createPaymentMethodSessionDto.origin\' was null or undefined when calling createPaymentMethodSession.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const rawResponse = await this.request({
            path: `/payment-method-sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePaymentMethodSessionDtoToJSON(createPaymentMethodSessionDto),
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => PaymentMethodSessionEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to create a new transaction by specified intent for a given payment method
     * Create transaction
    */
    async createTransaction(createTransactionRequestDto, idempotencyKey) {
        if (createTransactionRequestDto === null || createTransactionRequestDto === undefined) {
            throw new runtime.RequiredError('createTransactionRequestDto', 'Required parameter \'createTransactionRequestDto\' was null or undefined when calling createTransaction.');
        }
        if (createTransactionRequestDto.amount === null || createTransactionRequestDto.amount === undefined) {
            throw new runtime.RequiredError('createTransactionRequestDto.amount', 'Required parameter \'createTransactionRequestDto.amount\' was null or undefined when calling createTransaction.');
        }
        if (createTransactionRequestDto.currency === null || createTransactionRequestDto.currency === undefined) {
            throw new runtime.RequiredError('createTransactionRequestDto.currency', 'Required parameter \'createTransactionRequestDto.currency\' was null or undefined when calling createTransaction.');
        }
        if (createTransactionRequestDto.paymentMethod === null || createTransactionRequestDto.paymentMethod === undefined) {
            throw new runtime.RequiredError('createTransactionRequestDto.paymentMethod', 'Required parameter \'createTransactionRequestDto.paymentMethod\' was null or undefined when calling createTransaction.');
        }
        if (createTransactionRequestDto.intent === null || createTransactionRequestDto.intent === undefined) {
            throw new runtime.RequiredError('createTransactionRequestDto.intent', 'Required parameter \'createTransactionRequestDto.intent\' was null or undefined when calling createTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            headerParameters['Idempotency-Key'] = idempotencyKey;
        }
        const rawResponse = await this.request({
            path: `/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTransactionRequestDtoToJSON(createTransactionRequestDto),
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => TransactionEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Deletes a buyer by buyer ID.
     * Delete buyer.
    */
    async deleteBuyer(buyerId) {
        if (buyerId === null || buyerId === undefined) {
            throw new runtime.RequiredError('buyerId', 'Required parameter \'buyerId\' was null or undefined when calling deleteBuyer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/buyers/{buyerId}`.replace(`{${"buyerId"}}`, encodeURIComponent(buyerId)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => BuyersEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Delete connector service token by connectorServiceTokenId.
     * Delete connector service token.
    */
    async deleteConnectorServiceToken(connectorServiceTokenId) {
        if (connectorServiceTokenId === null || connectorServiceTokenId === undefined) {
            throw new runtime.RequiredError('connectorServiceTokenId', 'Required parameter \'connectorServiceTokenId\' was null or undefined when calling deleteConnectorServiceToken.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/payment-methods/service-token/{connectorServiceTokenId}`.replace(`{${"connectorServiceTokenId"}}`, encodeURIComponent(connectorServiceTokenId)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ConnectorServiceTokenEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Delete payment method by paymentMethodId.
     * Delete payment method.
    */
    async deletePaymentMethod(paymentMethodId) {
        if (paymentMethodId === null || paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter \'paymentMethodId\' was null or undefined when calling deletePaymentMethod.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/payment-methods/{paymentMethodId}`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(paymentMethodId)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => PaymentMethodEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Find a buyer by buyer ID.
     * Find buyer.
    */
    async getBuyer(buyerId) {
        if (buyerId === null || buyerId === undefined) {
            throw new runtime.RequiredError('buyerId', 'Required parameter \'buyerId\' was null or undefined when calling getBuyer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/buyers/{buyerId}`.replace(`{${"buyerId"}}`, encodeURIComponent(buyerId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => BuyersEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to fetch a checkout session
     * Get checkout session
    */
    async getCheckoutSession(sessionId) {
        if (sessionId === null || sessionId === undefined) {
            throw new runtime.RequiredError('sessionId', 'Required parameter \'sessionId\' was null or undefined when calling getCheckoutSession.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/checkout-sessions/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(sessionId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => CheckoutSessionEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Retrieve all child merchants of the merchant associated with the user making the request.
     * Find child merchants
    */
    async getChildMerchants() {
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/merchants/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => jsonValue.map(MerchantEntityFromJSON));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Find connector service token by connectorServiceTokenId.
     * Find connector service token.
    */
    async getConnectorServiceToken(connectorServiceTokenId) {
        if (connectorServiceTokenId === null || connectorServiceTokenId === undefined) {
            throw new runtime.RequiredError('connectorServiceTokenId', 'Required parameter \'connectorServiceTokenId\' was null or undefined when calling getConnectorServiceToken.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/payment-methods/service-token/{connectorServiceTokenId}`.replace(`{${"connectorServiceTokenId"}}`, encodeURIComponent(connectorServiceTokenId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ConnectorServiceTokenEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Find connector service tokens by paymentMethodId.
     * Find connector service tokens.
    */
    async getConnectorServiceTokens(paymentMethodId) {
        if (paymentMethodId === null || paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter \'paymentMethodId\' was null or undefined when calling getConnectorServiceTokens.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/payment-methods/service-tokens/{paymentMethodId}`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(paymentMethodId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => jsonValue.map(ConnectorServiceTokenEntityFromJSON));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Get fee details by amount
     * Get fee details
    */
    async getFeeDetails(requestParameters) {
        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount', 'Required parameter \'amount\' was null or undefined when calling getFeeDetails.');
        }
        const queryParameters = {};
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/fee-details`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => MerchantFeeDetailsEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Retrieve the merchant associated with the user making the request.
     * Find merchant
    */
    async getMerchant() {
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/merchants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => MerchantEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Find payment method by paymentMethodId.
     * Find by payment method.
    */
    async getPaymentMethod(paymentMethodId) {
        if (paymentMethodId === null || paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId', 'Required parameter \'paymentMethodId\' was null or undefined when calling getPaymentMethod.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/payment-methods/{paymentMethodId}`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(paymentMethodId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => PaymentMethodEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Find a payment method session by session ID.
     * Find payment method session.
    */
    async getPaymentMethodSession(sessionId) {
        if (sessionId === null || sessionId === undefined) {
            throw new runtime.RequiredError('sessionId', 'Required parameter \'sessionId\' was null or undefined when calling getPaymentMethodSession.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/payment-method-sessions/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(sessionId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => PaymentMethodSessionEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to find refund by transaction ID and refund ID
     * Find refund
    */
    async getRefund(refundId) {
        if (refundId === null || refundId === undefined) {
            throw new runtime.RequiredError('refundId', 'Required parameter \'refundId\' was null or undefined when calling getRefund.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/refund/{refundId}`.replace(`{${"refundId"}}`, encodeURIComponent(refundId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => TransactionRefundEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to find a transaction by ID
     * Find transaction
    */
    async getTransaction(transactionId) {
        if (transactionId === null || transactionId === undefined) {
            throw new runtime.RequiredError('transactionId', 'Required parameter \'transactionId\' was null or undefined when calling getTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(transactionId)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => TransactionEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Provision a stored payment method.
     * Provision stored payment method.
    */
    async provisionCardPaymentMethod(createProvisionedCardTokenDto) {
        if (createProvisionedCardTokenDto === null || createProvisionedCardTokenDto === undefined) {
            throw new runtime.RequiredError('createProvisionedCardTokenDto', 'Required parameter \'createProvisionedCardTokenDto\' was null or undefined when calling provisionCardPaymentMethod.');
        }
        if (createProvisionedCardTokenDto.paymentMethodId === null || createProvisionedCardTokenDto.paymentMethodId === undefined) {
            throw new runtime.RequiredError('createProvisionedCardTokenDto.paymentMethodId', 'Required parameter \'createProvisionedCardTokenDto.paymentMethodId\' was null or undefined when calling provisionCardPaymentMethod.');
        }
        if (createProvisionedCardTokenDto.connector === null || createProvisionedCardTokenDto.connector === undefined) {
            throw new runtime.RequiredError('createProvisionedCardTokenDto.connector', 'Required parameter \'createProvisionedCardTokenDto.connector\' was null or undefined when calling provisionCardPaymentMethod.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const rawResponse = await this.request({
            path: `/payment-methods/provision-card`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProvisionedCardTokenDtoToJSON(createProvisionedCardTokenDto),
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ConnectorServiceTokenEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to refund a captured transaction
     * Refund a transaction
    */
    async refundTransaction(createTransactionRefundDto, idempotencyKey) {
        if (createTransactionRefundDto === null || createTransactionRefundDto === undefined) {
            throw new runtime.RequiredError('createTransactionRefundDto', 'Required parameter \'createTransactionRefundDto\' was null or undefined when calling refundTransaction.');
        }
        if (createTransactionRefundDto.refundAmount === null || createTransactionRefundDto.refundAmount === undefined) {
            throw new runtime.RequiredError('createTransactionRefundDto.refundAmount', 'Required parameter \'createTransactionRefundDto.refundAmount\' was null or undefined when calling refundTransaction.');
        }
        if (createTransactionRefundDto.transactionId === null || createTransactionRefundDto.transactionId === undefined) {
            throw new runtime.RequiredError('createTransactionRefundDto.transactionId', 'Required parameter \'createTransactionRefundDto.transactionId\' was null or undefined when calling refundTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            headerParameters['Idempotency-Key'] = idempotencyKey;
        }
        const rawResponse = await this.request({
            path: `/transactions/refund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTransactionRefundDtoToJSON(createTransactionRefundDto),
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => TransactionRefundEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Search a buyer by query param
     * Search a buyer
    */
    async searchBuyers(requestParameters) {
        const queryParameters = {};
        if (requestParameters.merchantId !== undefined) {
            queryParameters['merchantId'] = requestParameters.merchantId;
        }
        if (requestParameters.buyerId !== undefined) {
            queryParameters['buyerId'] = requestParameters.buyerId;
        }
        if (requestParameters.externalBuyerId !== undefined) {
            queryParameters['externalBuyerId'] = requestParameters.externalBuyerId;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }
        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }
        if (requestParameters.familyName !== undefined) {
            queryParameters['familyName'] = requestParameters.familyName;
        }
        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }
        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        if (requestParameters.searchTerm !== undefined) {
            queryParameters['searchTerm'] = requestParameters.searchTerm;
        }
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/buyers/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => BuyersSearchEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Search all change notifications by date range.
     * Search for change notifications.
    */
    async searchChangeNotifications(requestParameters) {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate', 'Required parameter \'startDate\' was null or undefined when calling searchChangeNotifications.');
        }
        const queryParameters = {};
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/change-notifications/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ChangeNotificationsSearchEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Search a payment methods by query params.
     * Search payment methods.
    */
    async searchPaymentMethods(requestParameters) {
        const queryParameters = {};
        if (requestParameters.merchantId !== undefined) {
            queryParameters['merchantId'] = requestParameters.merchantId;
        }
        if (requestParameters.paymentMethodId !== undefined) {
            queryParameters['paymentMethodId'] = requestParameters.paymentMethodId;
        }
        if (requestParameters.externalPaymentMethodId !== undefined) {
            queryParameters['externalPaymentMethodId'] = requestParameters.externalPaymentMethodId;
        }
        if (requestParameters.accountHolderName !== undefined) {
            queryParameters['accountHolderName'] = requestParameters.accountHolderName;
        }
        if (requestParameters.buyerId !== undefined) {
            queryParameters['buyerId'] = requestParameters.buyerId;
        }
        if (requestParameters.externalBuyerId !== undefined) {
            queryParameters['externalBuyerId'] = requestParameters.externalBuyerId;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString();
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString();
        }
        if (requestParameters.method) {
            queryParameters['method'] = requestParameters.method;
        }
        if (requestParameters.currency) {
            queryParameters['currency'] = requestParameters.currency;
        }
        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/payment-methods/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => PaymentMethodsSearchEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to search refunds by query parameters
     * Search refunds
    */
    async searchRefunds(requestParameters) {
        const queryParameters = {};
        if (requestParameters.merchantId !== undefined) {
            queryParameters['merchantId'] = requestParameters.merchantId;
        }
        if (requestParameters.transactionId !== undefined) {
            queryParameters['transactionId'] = requestParameters.transactionId;
        }
        if (requestParameters.refundTransactionId !== undefined) {
            queryParameters['refundTransactionId'] = requestParameters.refundTransactionId;
        }
        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }
        if (requestParameters.currency) {
            queryParameters['currency'] = requestParameters.currency;
        }
        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/refunds/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => TransactionRefundsSearchEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Search all return notifications by date range.
     * Search for return notifications.
    */
    async searchReturnNotifications(requestParameters) {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate', 'Required parameter \'startDate\' was null or undefined when calling searchReturnNotifications.');
        }
        const queryParameters = {};
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/return-notifications/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ReturnNotificationsSearchEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Search transactions by query params
     * Search transactions
    */
    async searchTransactions(requestParameters) {
        const queryParameters = {};
        if (requestParameters.merchantId !== undefined) {
            queryParameters['merchantId'] = requestParameters.merchantId;
        }
        if (requestParameters.accountHolderName !== undefined) {
            queryParameters['accountHolderName'] = requestParameters.accountHolderName;
        }
        if (requestParameters.accountType) {
            queryParameters['accountType'] = requestParameters.accountType;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.amountGreaterThan !== undefined) {
            queryParameters['amountGreaterThan'] = requestParameters.amountGreaterThan;
        }
        if (requestParameters.amountLessThan !== undefined) {
            queryParameters['amountLessThan'] = requestParameters.amountLessThan;
        }
        if (requestParameters.amountMin !== undefined) {
            queryParameters['amountMin'] = requestParameters.amountMin;
        }
        if (requestParameters.amountMax !== undefined) {
            queryParameters['amountMax'] = requestParameters.amountMax;
        }
        if (requestParameters.authorizedAt !== undefined) {
            queryParameters['authorizedAt'] = requestParameters.authorizedAt;
        }
        if (requestParameters.buyerId !== undefined) {
            queryParameters['buyerId'] = requestParameters.buyerId;
        }
        if (requestParameters.capturedAt !== undefined) {
            queryParameters['capturedAt'] = requestParameters.capturedAt;
        }
        if (requestParameters.cardType) {
            queryParameters['cardType'] = requestParameters.cardType;
        }
        if (requestParameters.currency) {
            queryParameters['currency'] = requestParameters.currency;
        }
        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }
        if (requestParameters.externalBuyerId !== undefined) {
            queryParameters['externalBuyerId'] = requestParameters.externalBuyerId;
        }
        if (requestParameters.hasRefunds !== undefined) {
            queryParameters['hasRefunds'] = requestParameters.hasRefunds;
        }
        if (requestParameters.includeCFee !== undefined) {
            queryParameters['includeCFee'] = requestParameters.includeCFee;
        }
        if (requestParameters.intent) {
            queryParameters['intent'] = requestParameters.intent;
        }
        if (requestParameters.last4 !== undefined) {
            queryParameters['last4'] = requestParameters.last4;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.method) {
            queryParameters['method'] = requestParameters.method;
        }
        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }
        if (requestParameters.paymentMethodId !== undefined) {
            queryParameters['paymentMethodId'] = requestParameters.paymentMethodId;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }
        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }
        if (requestParameters.voidedAt !== undefined) {
            queryParameters['voidedAt'] = requestParameters.voidedAt;
        }
        if (requestParameters.sessionId !== undefined) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }
        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags;
        }
        if (requestParameters.externalTransactionId !== undefined) {
            queryParameters['externalTransactionId'] = requestParameters.externalTransactionId;
        }
        if (requestParameters.transactionId !== undefined) {
            queryParameters['transactionId'] = requestParameters.transactionId;
        }
        const headerParameters = {};
        const rawResponse = await this.request({
            path: `/transactions/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => TransactionsSearchEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Store a payment method.
     * Store payment method.
    */
    async storePaymentMethod(createPaymentMethodDto) {
        if (createPaymentMethodDto === null || createPaymentMethodDto === undefined) {
            throw new runtime.RequiredError('createPaymentMethodDto', 'Required parameter \'createPaymentMethodDto\' was null or undefined when calling storePaymentMethod.');
        }
        if (createPaymentMethodDto.method === null || createPaymentMethodDto.method === undefined) {
            throw new runtime.RequiredError('createPaymentMethodDto.method', 'Required parameter \'createPaymentMethodDto.method\' was null or undefined when calling storePaymentMethod.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const rawResponse = await this.request({
            path: `/payment-methods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePaymentMethodDtoToJSON(createPaymentMethodDto),
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => PaymentMethodEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Updates an existing buyer.
     * Update buyer.
    */
    async updateBuyer(updateBuyerDto) {
        if (updateBuyerDto === null || updateBuyerDto === undefined) {
            throw new runtime.RequiredError('updateBuyerDto', 'Required parameter \'updateBuyerDto\' was null or undefined when calling updateBuyer.');
        }
        if (updateBuyerDto.buyerId === null || updateBuyerDto.buyerId === undefined) {
            throw new runtime.RequiredError('updateBuyerDto.buyerId', 'Required parameter \'updateBuyerDto.buyerId\' was null or undefined when calling updateBuyer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const rawResponse = await this.request({
            path: `/buyers`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBuyerDtoToJSON(updateBuyerDto),
        });
        let response;
        if (rawResponse.status === 200) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => BuyersEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
    /**
     * Attempts to void an authorized transaction
     * Void a transaction
    */
    async voidTransaction(transactionId, idempotencyKey) {
        if (transactionId === null || transactionId === undefined) {
            throw new runtime.RequiredError('transactionId', 'Required parameter \'transactionId\' was null or undefined when calling voidTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            headerParameters['Idempotency-Key'] = idempotencyKey;
        }
        const rawResponse = await this.request({
            path: `/transactions/void/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(transactionId)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        let response;
        if (rawResponse.status === 201) {
            response = new runtime.JSONApiResponse(rawResponse, (jsonValue) => TransactionEntityFromJSON(jsonValue));
        }
        if (rawResponse.status === 400) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 401) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 403) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 404) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 500) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 502) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 503) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (rawResponse.status === 504) {
            const errorResponse = new runtime.JSONApiResponse(rawResponse, (jsonValue) => ErrorEntityFromJSON(jsonValue));
            const error = await errorResponse.value();
            throw error;
        }
        if (!response) {
            response = new runtime.TextApiResponse(rawResponse);
        }
        return await response.value();
    }
}
/**
 * @export
 */
export const SearchBuyersOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
export const SearchChangeNotificationsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
export const SearchPaymentMethodsMethodEnum = {
    Card: 'CARD',
    Bank: 'BANK'
};
/**
 * @export
 */
export const SearchPaymentMethodsCurrencyEnum = {
    Usd: 'USD'
};
/**
 * @export
 */
export const SearchPaymentMethodsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
export const SearchRefundsStatusEnum = {
    Processing: 'processing',
    Succeeded: 'succeeded',
    Declined: 'declined',
    Failed: 'failed',
    Voided: 'voided',
    Hold: 'hold',
    Submitted: 'submitted',
    Transmitted: 'transmitted',
    Settled: 'settled',
    Returned: 'returned'
};
/**
 * @export
 */
export const SearchRefundsCurrencyEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Aud: 'AUD'
};
/**
 * @export
 */
export const SearchRefundsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
export const SearchReturnNotificationsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
export const SearchTransactionsAccountTypeEnum = {
    Checking: 'CHECKING',
    Savings: 'SAVINGS'
};
/**
 * @export
 */
export const SearchTransactionsCardTypeEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Prepaid: 'PREPAID'
};
/**
 * @export
 */
export const SearchTransactionsCurrencyEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Aud: 'AUD'
};
/**
 * @export
 */
export const SearchTransactionsIntentEnum = {
    Capture: 'capture',
    Authorize: 'authorize',
    Debit: 'debit',
    Credit: 'credit'
};
/**
 * @export
 */
export const SearchTransactionsMethodEnum = {
    Ach: 'ACH',
    Bank: 'BANK',
    Card: 'CARD'
};
/**
 * @export
 */
export const SearchTransactionsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
export const SearchTransactionsStatusEnum = {
    Processing: 'processing',
    BuyerApprovalPending: 'buyerApprovalPending',
    Authorized: 'authorized',
    AuthorizationFailed: 'authorizationFailed',
    CaptureFailed: 'captureFailed',
    Declined: 'declined',
    CapturePending: 'capturePending',
    Captured: 'captured',
    VoidPending: 'voidPending',
    Voided: 'voided',
    Hold: 'hold',
    Submitted: 'submitted',
    Transmitted: 'transmitted',
    Settled: 'settled',
    Returned: 'returned',
    Rejected: 'rejected'
};
