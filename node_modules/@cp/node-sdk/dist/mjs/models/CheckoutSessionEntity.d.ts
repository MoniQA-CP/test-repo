/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import type { AvailablePaymentMethodEntity } from './AvailablePaymentMethodEntity';
import type { CheckoutSessionItemEntity } from './CheckoutSessionItemEntity';
import type { TagEntity } from './TagEntity';
/**
 *
 * @export
 * @interface CheckoutSessionEntity
 */
export interface CheckoutSessionEntity {
    /**
     * The id of the checkout session.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    sessionId: string;
    /**
     * The merchant ID of the checkout session.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    merchantId: string;
    /**
     * The UI mode of the checkout session.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    uiMode: CheckoutSessionEntityUiModeEnum;
    /**
     * The status of the checkout session.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    status: CheckoutSessionEntityStatusEnum;
    /**
     * The currency of the checkout session.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    currency: string;
    /**
     * The total of the checkout session.
     * @type {number}
     * @memberof CheckoutSessionEntity
     */
    total: number;
    /**
     * The subtotal of the checkout session.
     * @type {number}
     * @memberof CheckoutSessionEntity
     */
    subtotal: number;
    /**
     * The fees total of the checkout session.
     * @type {number}
     * @memberof CheckoutSessionEntity
     */
    feesTotal: number;
    /**
     * The taxes total of the checkout session.
     * @type {number}
     * @memberof CheckoutSessionEntity
     */
    taxTotal: number;
    /**
     * The discount total of the checkout session.
     * @type {number}
     * @memberof CheckoutSessionEntity
     */
    discountTotal: number;
    /**
     * The shipping total of the checkout session.
     * @type {number}
     * @memberof CheckoutSessionEntity
     */
    shippingTotal: number;
    /**
     * The available payment methods of the checkout session.
     * @type {Array<AvailablePaymentMethodEntity>}
     * @memberof CheckoutSessionEntity
     */
    availablePaymentMethods: Array<AvailablePaymentMethodEntity>;
    /**
     * The items for the checkout session.
     * @type {Array<CheckoutSessionItemEntity>}
     * @memberof CheckoutSessionEntity
     */
    items: Array<CheckoutSessionItemEntity>;
    /**
     * The URL to redirect to after the checkout session is completed.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    successRedirectUrl: string;
    /**
     * The URL to redirect to after the checkout session is canceled.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    cancelRedirectUrl: string;
    /**
     * The country of the checkout session.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    country: string;
    /**
     * The expiration date of the checkout session.
     * @type {Date}
     * @memberof CheckoutSessionEntity
     */
    expiresAt?: Date;
    /**
     * The expiration date of the checkout session.
     * @type {Date}
     * @memberof CheckoutSessionEntity
     */
    expiredAt?: Date;
    /**
     * If the session can be extended or not.
     * @type {boolean}
     * @memberof CheckoutSessionEntity
     */
    canExtend: boolean;
    /**
     * The reason why the checkout session expired.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    expiredReason?: string;
    /**
     * The descriptive labels or keywords that will be assigned to the transaction associated with the checkout session.
     * @type {Array<TagEntity>}
     * @memberof CheckoutSessionEntity
     */
    tags?: Array<TagEntity>;
    /**
     * Indicates whether the session can store payment details for future transactions.
     * @type {boolean}
     * @memberof CheckoutSessionEntity
     */
    canStore?: boolean;
    /**
     * The buyer ID of the checkout session.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    buyerId?: string;
    /**
     * The external buyer ID of the checkout session.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    externalBuyerId?: string;
    /**
     * Who should initiate the transaction.
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    transactionInitiator?: CheckoutSessionEntityTransactionInitiatorEnum;
    /**
     *
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    redirectUrl?: string;
    /**
     *
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    externalTransactionId?: string;
    /**
     *
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    secCode?: string;
    /**
     *
     * @type {boolean}
     * @memberof CheckoutSessionEntity
     */
    excludeCFee: boolean;
}
/**
 * @export
 */
export declare const CheckoutSessionEntityUiModeEnum: {
    readonly Hosted: "HOSTED";
    readonly Embedded: "EMBEDDED";
};
export type CheckoutSessionEntityUiModeEnum = typeof CheckoutSessionEntityUiModeEnum[keyof typeof CheckoutSessionEntityUiModeEnum];
/**
 * @export
 */
export declare const CheckoutSessionEntityStatusEnum: {
    readonly Pending: "PENDING";
    readonly Processing: "PROCESSING";
    readonly Expired: "EXPIRED";
    readonly Completed: "COMPLETED";
};
export type CheckoutSessionEntityStatusEnum = typeof CheckoutSessionEntityStatusEnum[keyof typeof CheckoutSessionEntityStatusEnum];
/**
 * @export
 */
export declare const CheckoutSessionEntityTransactionInitiatorEnum: {
    readonly Mit: "MIT";
    readonly Cit: "CIT";
    readonly Sit: "SIT";
};
export type CheckoutSessionEntityTransactionInitiatorEnum = typeof CheckoutSessionEntityTransactionInitiatorEnum[keyof typeof CheckoutSessionEntityTransactionInitiatorEnum];
/**
 * Check if a given object implements the CheckoutSessionEntity interface.
 */
export declare function instanceOfCheckoutSessionEntity(value: object): boolean;
export declare function CheckoutSessionEntityFromJSON(json: any): CheckoutSessionEntity;
export declare function CheckoutSessionEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutSessionEntity;
export declare function CheckoutSessionEntityToJSON(value?: CheckoutSessionEntity | null): any;
