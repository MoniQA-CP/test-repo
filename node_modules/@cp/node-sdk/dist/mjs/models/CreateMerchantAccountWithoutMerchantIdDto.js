/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import { exists, removeNullUndefined } from '../runtime';
import { CreateCFeeDtoFromJSON, CreateCFeeDtoToJSON, } from './CreateCFeeDto';
import { CreateMerchantConnectorWithoutMerchantAccountIdDtoFromJSON, CreateMerchantConnectorWithoutMerchantAccountIdDtoToJSON, } from './CreateMerchantConnectorWithoutMerchantAccountIdDto';
/**
 * @export
 */
export const CreateMerchantAccountWithoutMerchantIdDtoMethodEnum = {
    Card: 'CARD',
    Ach: 'ACH'
};
/**
 * @export
 */
export const CreateMerchantAccountWithoutMerchantIdDtoPspEnum = {
    Tsys: 'TSYS',
    Nashville: 'NASHVILLE',
    North: 'NORTH',
    ChannelPayments: 'CHANNEL_PAYMENTS'
};
/**
 * @export
 */
export const CreateMerchantAccountWithoutMerchantIdDtoCardTypesEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Prepaid: 'PREPAID'
};
/**
 * @export
 */
export const CreateMerchantAccountWithoutMerchantIdDtoCardSchemesEnum = {
    Visa: 'VISA',
    Mastercard: 'MASTERCARD',
    Amex: 'AMEX',
    Discover: 'DISCOVER',
    Jcb: 'JCB',
    DinersClub: 'DINERS_CLUB',
    Maestro: 'MAESTRO'
};
/**
 * @export
 */
export const CreateMerchantAccountWithoutMerchantIdDtoCurrenciesEnum = {
    Usd: 'USD',
    Aud: 'AUD',
    Cad: 'CAD'
};
/**
 * Check if a given object implements the CreateMerchantAccountWithoutMerchantIdDto interface.
 */
export function instanceOfCreateMerchantAccountWithoutMerchantIdDto(value) {
    let isInstance = true;
    isInstance = isInstance && "issuedMid" in value;
    isInstance = isInstance && "method" in value;
    isInstance = isInstance && "psp" in value;
    isInstance = isInstance && "cFee" in value;
    isInstance = isInstance && "connectors" in value;
    return isInstance;
}
export function CreateMerchantAccountWithoutMerchantIdDtoFromJSON(json) {
    return CreateMerchantAccountWithoutMerchantIdDtoFromJSONTyped(json, false);
}
export function CreateMerchantAccountWithoutMerchantIdDtoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'issuedMid': json['issuedMid'],
        'method': json['method'],
        'psp': json['psp'],
        'cFee': CreateCFeeDtoFromJSON(json['cFee']),
        'cardTypes': !exists(json, 'cardTypes') ? undefined : json['cardTypes'],
        'cardSchemes': !exists(json, 'cardSchemes') ? undefined : json['cardSchemes'],
        'currencies': !exists(json, 'currencies') ? undefined : json['currencies'],
        'connectors': (json['connectors'].map(CreateMerchantConnectorWithoutMerchantAccountIdDtoFromJSON)),
        'mcc': !exists(json, 'mcc') ? undefined : json['mcc'],
        'bin': !exists(json, 'bin') ? undefined : json['bin'],
        'chain': !exists(json, 'chain') ? undefined : json['chain'],
        'store': !exists(json, 'store') ? undefined : json['store'],
        'agent': !exists(json, 'agent') ? undefined : json['agent'],
        'isDefault': !exists(json, 'isDefault') ? undefined : json['isDefault'],
    };
    return removeNullUndefined(typed);
}
export function CreateMerchantAccountWithoutMerchantIdDtoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'issuedMid': value.issuedMid,
        'method': value.method,
        'psp': value.psp,
        'cFee': CreateCFeeDtoToJSON(value.cFee),
        'cardTypes': value.cardTypes,
        'cardSchemes': value.cardSchemes,
        'currencies': value.currencies,
        'connectors': (value.connectors.map(CreateMerchantConnectorWithoutMerchantAccountIdDtoToJSON)),
        'mcc': value.mcc,
        'bin': value.bin,
        'chain': value.chain,
        'store': value.store,
        'agent': value.agent,
        'isDefault': value.isDefault,
    };
}
