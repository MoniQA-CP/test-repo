/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import type { CFeeEntity } from './CFeeEntity';
import type { MerchantConnectorServiceEntity } from './MerchantConnectorServiceEntity';
/**
 *
 * @export
 * @interface MerchantAccountEntity
 */
export interface MerchantAccountEntity {
    /**
     * The alphanumeric ID of the merchant account.
     * @type {string}
     * @memberof MerchantAccountEntity
     */
    merchantAccountId: string;
    /**
     * The associated merchant ID.
     * @type {string}
     * @memberof MerchantAccountEntity
     */
    merchantId?: string;
    /**
     * The issued MID (Merchant ID).
     * @type {string}
     * @memberof MerchantAccountEntity
     */
    issuedMid: string;
    /**
     * The payment service provider.
     * @type {string}
     * @memberof MerchantAccountEntity
     */
    psp: MerchantAccountEntityPspEnum;
    /**
     * The CFee details.
     * @type {CFeeEntity}
     * @memberof MerchantAccountEntity
     */
    cFee: CFeeEntity;
    /**
     * The date the merchant was created.
     * @type {Date}
     * @memberof MerchantAccountEntity
     */
    createdAt: Date;
    /**
     * The date the merchant was last updated.
     * @type {Date}
     * @memberof MerchantAccountEntity
     */
    updatedAt: Date;
    /**
     * The payment method.
     * @type {string}
     * @memberof MerchantAccountEntity
     */
    method: MerchantAccountEntityMethodEnum;
    /**
     * The status of the merchant account.
     * @type {string}
     * @memberof MerchantAccountEntity
     */
    status: MerchantAccountEntityStatusEnum;
    /**
     * The card schemes.
     * @type {Array<string>}
     * @memberof MerchantAccountEntity
     */
    cardSchemes: Array<MerchantAccountEntityCardSchemesEnum>;
    /**
     * The accepted currencies.
     * @type {Array<string>}
     * @memberof MerchantAccountEntity
     */
    currencies: Array<MerchantAccountEntityCurrenciesEnum>;
    /**
     * The accepted card types.
     * @type {Array<string>}
     * @memberof MerchantAccountEntity
     */
    cardTypes: Array<MerchantAccountEntityCardTypesEnum>;
    /**
     * Specifies if default merchant account for a given payment method.
     * @type {boolean}
     * @memberof MerchantAccountEntity
     */
    isDefault?: boolean;
    /**
     * The name of the merchant account.
     * @type {string}
     * @memberof MerchantAccountEntity
     */
    name?: string;
    /**
     * The connectors.
     * @type {Array<MerchantConnectorServiceEntity>}
     * @memberof MerchantAccountEntity
     */
    connectors?: Array<MerchantConnectorServiceEntity>;
    /**
     * The date the merchant account was last polled for return notifications.
     * @type {Date}
     * @memberof MerchantAccountEntity
     */
    lastPolledAt?: Date;
    /**
     * The merchant category code.
     * @type {string}
     * @memberof MerchantAccountEntity
     */
    mcc?: string;
}
/**
 * @export
 */
export declare const MerchantAccountEntityPspEnum: {
    readonly Tsys: "TSYS";
    readonly Nashville: "NASHVILLE";
    readonly North: "NORTH";
    readonly ChannelPayments: "CHANNEL_PAYMENTS";
};
export type MerchantAccountEntityPspEnum = typeof MerchantAccountEntityPspEnum[keyof typeof MerchantAccountEntityPspEnum];
/**
 * @export
 */
export declare const MerchantAccountEntityMethodEnum: {
    readonly Card: "CARD";
    readonly Ach: "ACH";
};
export type MerchantAccountEntityMethodEnum = typeof MerchantAccountEntityMethodEnum[keyof typeof MerchantAccountEntityMethodEnum];
/**
 * @export
 */
export declare const MerchantAccountEntityStatusEnum: {
    readonly Pending: "PENDING";
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
    readonly Suspended: "SUSPENDED";
    readonly Closed: "CLOSED";
};
export type MerchantAccountEntityStatusEnum = typeof MerchantAccountEntityStatusEnum[keyof typeof MerchantAccountEntityStatusEnum];
/**
 * @export
 */
export declare const MerchantAccountEntityCardSchemesEnum: {
    readonly Visa: "VISA";
    readonly Mastercard: "MASTERCARD";
    readonly Amex: "AMEX";
    readonly Discover: "DISCOVER";
    readonly Jcb: "JCB";
    readonly DinersClub: "DINERS_CLUB";
    readonly Maestro: "MAESTRO";
};
export type MerchantAccountEntityCardSchemesEnum = typeof MerchantAccountEntityCardSchemesEnum[keyof typeof MerchantAccountEntityCardSchemesEnum];
/**
 * @export
 */
export declare const MerchantAccountEntityCurrenciesEnum: {
    readonly Usd: "USD";
    readonly Aud: "AUD";
    readonly Cad: "CAD";
};
export type MerchantAccountEntityCurrenciesEnum = typeof MerchantAccountEntityCurrenciesEnum[keyof typeof MerchantAccountEntityCurrenciesEnum];
/**
 * @export
 */
export declare const MerchantAccountEntityCardTypesEnum: {
    readonly Credit: "CREDIT";
    readonly Debit: "DEBIT";
    readonly Prepaid: "PREPAID";
};
export type MerchantAccountEntityCardTypesEnum = typeof MerchantAccountEntityCardTypesEnum[keyof typeof MerchantAccountEntityCardTypesEnum];
/**
 * Check if a given object implements the MerchantAccountEntity interface.
 */
export declare function instanceOfMerchantAccountEntity(value: object): boolean;
export declare function MerchantAccountEntityFromJSON(json: any): MerchantAccountEntity;
export declare function MerchantAccountEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerchantAccountEntity;
export declare function MerchantAccountEntityToJSON(value?: MerchantAccountEntity | null): any;
