/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import { exists, removeNullUndefined } from '../runtime';
import { CFeeEntityFromJSON, CFeeEntityToJSON, } from './CFeeEntity';
import { MerchantConnectorServiceEntityFromJSON, MerchantConnectorServiceEntityToJSON, } from './MerchantConnectorServiceEntity';
/**
 * @export
 */
export const MerchantAccountServiceEntityPspEnum = {
    Tsys: 'TSYS',
    Nashville: 'NASHVILLE',
    North: 'NORTH',
    ChannelPayments: 'CHANNEL_PAYMENTS'
};
/**
 * @export
 */
export const MerchantAccountServiceEntityMethodEnum = {
    Card: 'CARD',
    Ach: 'ACH'
};
/**
 * @export
 */
export const MerchantAccountServiceEntityStatusEnum = {
    Pending: 'PENDING',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE',
    Suspended: 'SUSPENDED',
    Closed: 'CLOSED'
};
/**
 * @export
 */
export const MerchantAccountServiceEntityCardSchemesEnum = {
    Visa: 'VISA',
    Mastercard: 'MASTERCARD',
    Amex: 'AMEX',
    Discover: 'DISCOVER',
    Jcb: 'JCB',
    DinersClub: 'DINERS_CLUB',
    Maestro: 'MAESTRO'
};
/**
 * @export
 */
export const MerchantAccountServiceEntityCurrenciesEnum = {
    Usd: 'USD',
    Aud: 'AUD',
    Cad: 'CAD'
};
/**
 * @export
 */
export const MerchantAccountServiceEntityCardTypesEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Prepaid: 'PREPAID'
};
/**
 * Check if a given object implements the MerchantAccountServiceEntity interface.
 */
export function instanceOfMerchantAccountServiceEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "merchantAccountId" in value;
    isInstance = isInstance && "issuedMid" in value;
    isInstance = isInstance && "psp" in value;
    isInstance = isInstance && "cFee" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "method" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "cardSchemes" in value;
    isInstance = isInstance && "currencies" in value;
    isInstance = isInstance && "cardTypes" in value;
    return isInstance;
}
export function MerchantAccountServiceEntityFromJSON(json) {
    return MerchantAccountServiceEntityFromJSONTyped(json, false);
}
export function MerchantAccountServiceEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'merchantAccountId': json['merchantAccountId'],
        'merchantId': !exists(json, 'merchantId') ? undefined : json['merchantId'],
        'issuedMid': json['issuedMid'],
        'psp': json['psp'],
        'cFee': CFeeEntityFromJSON(json['cFee']),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'method': json['method'],
        'status': json['status'],
        'cardSchemes': json['cardSchemes'],
        'currencies': json['currencies'],
        'cardTypes': json['cardTypes'],
        'isDefault': !exists(json, 'isDefault') ? undefined : json['isDefault'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'connectors': !exists(json, 'connectors') ? undefined : (json['connectors'].map(MerchantConnectorServiceEntityFromJSON)),
        'lastPolledAt': !exists(json, 'lastPolledAt') ? undefined : (new Date(json['lastPolledAt'])),
        'mcc': !exists(json, 'mcc') ? undefined : json['mcc'],
    };
    return removeNullUndefined(typed);
}
export function MerchantAccountServiceEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'merchantAccountId': value.merchantAccountId,
        'merchantId': value.merchantId,
        'issuedMid': value.issuedMid,
        'psp': value.psp,
        'cFee': CFeeEntityToJSON(value.cFee),
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'method': value.method,
        'status': value.status,
        'cardSchemes': value.cardSchemes,
        'currencies': value.currencies,
        'cardTypes': value.cardTypes,
        'isDefault': value.isDefault,
        'name': value.name,
        'connectors': value.connectors === undefined ? undefined : (value.connectors.map(MerchantConnectorServiceEntityToJSON)),
        'lastPolledAt': value.lastPolledAt === undefined ? undefined : (value.lastPolledAt.toISOString()),
        'mcc': value.mcc,
    };
}
