/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import type { BankDetailsServiceEntity } from './BankDetailsServiceEntity';
import type { BillingDetailsEntity } from './BillingDetailsEntity';
import type { BuyerEntity } from './BuyerEntity';
import type { CardDetailsServiceEntity } from './CardDetailsServiceEntity';
import type { ConnectorServiceTokenEntity } from './ConnectorServiceTokenEntity';
/**
 *
 * @export
 * @interface PaymentMethodEntity
 */
export interface PaymentMethodEntity {
    /**
     * The ID of the record.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    id: string;
    /**
     * The payment method ID.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    paymentMethodId: string;
    /**
     * The merchant ID.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    merchantId: string;
    /**
     * The payment method status.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    status: PaymentMethodEntityStatusEnum;
    /**
     * The payment method type.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    method: PaymentMethodEntityMethodEnum;
    /**
     * The external payment method ID to associate with your records.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    externalPaymentMethodId?: string;
    /**
     * The connector service tokens.
     * @type {ConnectorServiceTokenEntity}
     * @memberof PaymentMethodEntity
     */
    connectorServiceTokens?: ConnectorServiceTokenEntity;
    /**
     * The currency to use with this payment method.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    currency?: PaymentMethodEntityCurrencyEnum;
    /**
     * The 2-letter ISO country code to use with this payment method.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    countryCode?: string;
    /**
     * The card details.
     * @type {CardDetailsServiceEntity}
     * @memberof PaymentMethodEntity
     */
    cardDetails?: CardDetailsServiceEntity;
    /**
     * The bank details.
     * @type {BankDetailsServiceEntity}
     * @memberof PaymentMethodEntity
     */
    accountDetails?: BankDetailsServiceEntity;
    /**
     * The buyer entity.
     * @type {BuyerEntity}
     * @memberof PaymentMethodEntity
     */
    buyer?: BuyerEntity;
    /**
     * The buyer ID.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    buyerId?: string;
    /**
     * The external buyer ID.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    externalBuyerId?: string;
    /**
     * The payment method creation date.
     * @type {Date}
     * @memberof PaymentMethodEntity
     */
    createdAt?: Date;
    /**
     * The payment method update date.
     * @type {Date}
     * @memberof PaymentMethodEntity
     */
    updatedAt?: Date;
    /**
     * The payment method creation service date.
     * @type {Date}
     * @memberof PaymentMethodEntity
     */
    paymentMethodCreatedAt?: Date;
    /**
     * The payment method update service date.
     * @type {Date}
     * @memberof PaymentMethodEntity
     */
    paymentMethodUpdatedAt?: Date;
    /**
     * The payment method integration ID.
     * @type {string}
     * @memberof PaymentMethodEntity
     */
    paymentMethodIntegrationId?: string;
    /**
     * The billing details of the account holder.
     * @type {BillingDetailsEntity}
     * @memberof PaymentMethodEntity
     */
    billingDetails?: BillingDetailsEntity;
    /**
     * If the customer initiated the payment method creation or not.
     * @type {boolean}
     * @memberof PaymentMethodEntity
     */
    isCustomerStored?: boolean;
}
/**
 * @export
 */
export declare const PaymentMethodEntityStatusEnum: {
    readonly Processing: "processing";
    readonly ApprovalRequired: "approvalRequired";
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Expired: "expired";
};
export type PaymentMethodEntityStatusEnum = typeof PaymentMethodEntityStatusEnum[keyof typeof PaymentMethodEntityStatusEnum];
/**
 * @export
 */
export declare const PaymentMethodEntityMethodEnum: {
    readonly Card: "CARD";
    readonly Bank: "BANK";
};
export type PaymentMethodEntityMethodEnum = typeof PaymentMethodEntityMethodEnum[keyof typeof PaymentMethodEntityMethodEnum];
/**
 * @export
 */
export declare const PaymentMethodEntityCurrencyEnum: {
    readonly Usd: "USD";
};
export type PaymentMethodEntityCurrencyEnum = typeof PaymentMethodEntityCurrencyEnum[keyof typeof PaymentMethodEntityCurrencyEnum];
/**
 * Check if a given object implements the PaymentMethodEntity interface.
 */
export declare function instanceOfPaymentMethodEntity(value: object): boolean;
export declare function PaymentMethodEntityFromJSON(json: any): PaymentMethodEntity;
export declare function PaymentMethodEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodEntity;
export declare function PaymentMethodEntityToJSON(value?: PaymentMethodEntity | null): any;
