/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import { exists, removeNullUndefined } from '../runtime';
import { BankDetailsServiceEntityFromJSON, BankDetailsServiceEntityToJSON, } from './BankDetailsServiceEntity';
import { BillingDetailsEntityFromJSON, BillingDetailsEntityToJSON, } from './BillingDetailsEntity';
import { BuyerEntityFromJSON, BuyerEntityToJSON, } from './BuyerEntity';
import { CardDetailsServiceEntityFromJSON, CardDetailsServiceEntityToJSON, } from './CardDetailsServiceEntity';
import { ConnectorServiceTokenEntityFromJSON, ConnectorServiceTokenEntityToJSON, } from './ConnectorServiceTokenEntity';
/**
 * @export
 */
export const PaymentMethodEntityStatusEnum = {
    Processing: 'processing',
    ApprovalRequired: 'approvalRequired',
    Succeeded: 'succeeded',
    Failed: 'failed',
    Expired: 'expired'
};
/**
 * @export
 */
export const PaymentMethodEntityMethodEnum = {
    Card: 'CARD',
    Bank: 'BANK'
};
/**
 * @export
 */
export const PaymentMethodEntityCurrencyEnum = {
    Usd: 'USD'
};
/**
 * Check if a given object implements the PaymentMethodEntity interface.
 */
export function instanceOfPaymentMethodEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "paymentMethodId" in value;
    isInstance = isInstance && "merchantId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "method" in value;
    return isInstance;
}
export function PaymentMethodEntityFromJSON(json) {
    return PaymentMethodEntityFromJSONTyped(json, false);
}
export function PaymentMethodEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'id': json['id'],
        'paymentMethodId': json['paymentMethodId'],
        'merchantId': json['merchantId'],
        'status': json['status'],
        'method': json['method'],
        'externalPaymentMethodId': !exists(json, 'externalPaymentMethodId') ? undefined : json['externalPaymentMethodId'],
        'connectorServiceTokens': !exists(json, 'connectorServiceTokens') ? undefined : ConnectorServiceTokenEntityFromJSON(json['connectorServiceTokens']),
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'cardDetails': !exists(json, 'cardDetails') ? undefined : CardDetailsServiceEntityFromJSON(json['cardDetails']),
        'accountDetails': !exists(json, 'accountDetails') ? undefined : BankDetailsServiceEntityFromJSON(json['accountDetails']),
        'buyer': !exists(json, 'buyer') ? undefined : BuyerEntityFromJSON(json['buyer']),
        'buyerId': !exists(json, 'buyerId') ? undefined : json['buyerId'],
        'externalBuyerId': !exists(json, 'externalBuyerId') ? undefined : json['externalBuyerId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'paymentMethodCreatedAt': !exists(json, 'paymentMethodCreatedAt') ? undefined : (new Date(json['paymentMethodCreatedAt'])),
        'paymentMethodUpdatedAt': !exists(json, 'paymentMethodUpdatedAt') ? undefined : (new Date(json['paymentMethodUpdatedAt'])),
        'paymentMethodIntegrationId': !exists(json, 'paymentMethodIntegrationId') ? undefined : json['paymentMethodIntegrationId'],
        'billingDetails': !exists(json, 'billingDetails') ? undefined : BillingDetailsEntityFromJSON(json['billingDetails']),
        'isCustomerStored': !exists(json, 'isCustomerStored') ? undefined : json['isCustomerStored'],
    };
    return removeNullUndefined(typed);
}
export function PaymentMethodEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'paymentMethodId': value.paymentMethodId,
        'merchantId': value.merchantId,
        'status': value.status,
        'method': value.method,
        'externalPaymentMethodId': value.externalPaymentMethodId,
        'connectorServiceTokens': ConnectorServiceTokenEntityToJSON(value.connectorServiceTokens),
        'currency': value.currency,
        'countryCode': value.countryCode,
        'cardDetails': CardDetailsServiceEntityToJSON(value.cardDetails),
        'accountDetails': BankDetailsServiceEntityToJSON(value.accountDetails),
        'buyer': BuyerEntityToJSON(value.buyer),
        'buyerId': value.buyerId,
        'externalBuyerId': value.externalBuyerId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'paymentMethodCreatedAt': value.paymentMethodCreatedAt === undefined ? undefined : (value.paymentMethodCreatedAt.toISOString()),
        'paymentMethodUpdatedAt': value.paymentMethodUpdatedAt === undefined ? undefined : (value.paymentMethodUpdatedAt.toISOString()),
        'paymentMethodIntegrationId': value.paymentMethodIntegrationId,
        'billingDetails': BillingDetailsEntityToJSON(value.billingDetails),
        'isCustomerStored': value.isCustomerStored,
    };
}
