/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import type { AuthorizedPaymentInstrumentsEntity } from './AuthorizedPaymentInstrumentsEntity';
import type { PaymentMethodSessionAttemptEntity } from './PaymentMethodSessionAttemptEntity';
/**
 *
 * @export
 * @interface PaymentMethodSessionBaseEntity
 */
export interface PaymentMethodSessionBaseEntity {
    /**
     * Unique identifier for the session
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    sessionId: string;
    /**
     * Unique Identifier for the merchant associated with the session
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    merchantId: string;
    /**
     * List of attempts made during the session
     * @type {Array<PaymentMethodSessionAttemptEntity>}
     * @memberof PaymentMethodSessionBaseEntity
     */
    attempts: Array<PaymentMethodSessionAttemptEntity>;
    /**
     * Current status of the payment method session
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    status: PaymentMethodSessionBaseEntityStatusEnum;
    /**
     * The fully qualified origin (scheme + host) of the embedding website, e.g., https://merchant.com
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    origin: string;
    /**
     * The date and time when the session expires
     * @type {Date}
     * @memberof PaymentMethodSessionBaseEntity
     */
    expiresAt: Date;
    /**
     * The date and time when the session was created
     * @type {Date}
     * @memberof PaymentMethodSessionBaseEntity
     */
    createdAt: Date;
    /**
     * The date and time when the session was last updated
     * @type {Date}
     * @memberof PaymentMethodSessionBaseEntity
     */
    updatedAt: Date;
    /**
     * Indicates whether the session has been deleted
     * @type {boolean}
     * @memberof PaymentMethodSessionBaseEntity
     */
    deleted: boolean;
    /**
     * Signed token used to authenticate and validate the session from the client-side.
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    sessionToken?: string;
    /**
     * List of authorized payment instruments associated with the session
     * @type {AuthorizedPaymentInstrumentsEntity}
     * @memberof PaymentMethodSessionBaseEntity
     */
    authorizedPaymentInstruments?: AuthorizedPaymentInstrumentsEntity;
    /**
     * The unique identifier for the payment method created by the session
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    paymentMethodId?: string;
    /**
     * The unique identifier for the buyer associated with the session
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    buyerId?: string;
    /**
     * The external identifier for the buyer associated with the session
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    externalBuyerId?: string;
    /**
     * Reason for session expiration, if applicable
     * @type {string}
     * @memberof PaymentMethodSessionBaseEntity
     */
    expiredReason?: PaymentMethodSessionBaseEntityExpiredReasonEnum;
    /**
     * The date and time when the session expired, if applicable
     * @type {Date}
     * @memberof PaymentMethodSessionBaseEntity
     */
    expiredAt?: Date;
    /**
     * The date and time when the session was completed, if applicable
     * @type {Date}
     * @memberof PaymentMethodSessionBaseEntity
     */
    completedAt?: Date;
    /**
     * The date and time when the session was deleted, if applicable
     * @type {Date}
     * @memberof PaymentMethodSessionBaseEntity
     */
    deletedAt?: Date;
}
/**
 * @export
 */
export declare const PaymentMethodSessionBaseEntityStatusEnum: {
    readonly Pending: "PENDING";
    readonly Expired: "EXPIRED";
    readonly Completed: "COMPLETED";
};
export type PaymentMethodSessionBaseEntityStatusEnum = typeof PaymentMethodSessionBaseEntityStatusEnum[keyof typeof PaymentMethodSessionBaseEntityStatusEnum];
/**
 * @export
 */
export declare const PaymentMethodSessionBaseEntityExpiredReasonEnum: {
    readonly Timeout: "TIMEOUT";
    readonly MaxAttempts: "MAX_ATTEMPTS";
    readonly UserCancelled: "USER_CANCELLED";
};
export type PaymentMethodSessionBaseEntityExpiredReasonEnum = typeof PaymentMethodSessionBaseEntityExpiredReasonEnum[keyof typeof PaymentMethodSessionBaseEntityExpiredReasonEnum];
/**
 * Check if a given object implements the PaymentMethodSessionBaseEntity interface.
 */
export declare function instanceOfPaymentMethodSessionBaseEntity(value: object): boolean;
export declare function PaymentMethodSessionBaseEntityFromJSON(json: any): PaymentMethodSessionBaseEntity;
export declare function PaymentMethodSessionBaseEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodSessionBaseEntity;
export declare function PaymentMethodSessionBaseEntityToJSON(value?: PaymentMethodSessionBaseEntity | null): any;
