/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import type { TagEntity } from './TagEntity';
import type { TransactionFeeDetailsEntity } from './TransactionFeeDetailsEntity';
import type { TransactionPaymentInstrumentBaseEntity } from './TransactionPaymentInstrumentBaseEntity';
/**
 *
 * @export
 * @interface TransactionEntity
 */
export interface TransactionEntity {
    /**
     * The ID of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    transactionId: string;
    /**
     * The ID of the merchant.
     * @type {string}
     * @memberof TransactionEntity
     */
    merchantId: string;
    /**
     * The status of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    status: TransactionEntityStatusEnum;
    /**
     * The intent of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    intent: TransactionEntityIntentEnum;
    /**
     * The description of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    description?: string;
    /**
     * The amount of the transaction.
     * @type {number}
     * @memberof TransactionEntity
     */
    amount: number;
    /**
     * The net amount of the transaction.
     * @type {number}
     * @memberof TransactionEntity
     */
    netAmount: number;
    /**
     * The fee of the transaction.
     * @type {number}
     * @memberof TransactionEntity
     */
    fee: number;
    /**
     * The fee details of the transaction.
     * @type {Array<TransactionFeeDetailsEntity>}
     * @memberof TransactionEntity
     */
    feeDetails?: Array<TransactionFeeDetailsEntity>;
    /**
     * The currency of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    currency?: TransactionEntityCurrencyEnum;
    /**
     * The SEC code of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    secCode?: TransactionEntitySecCodeEnum;
    /**
     * The payment method of the transaction.
     * @type {TransactionPaymentInstrumentBaseEntity}
     * @memberof TransactionEntity
     */
    paymentMethod?: TransactionPaymentInstrumentBaseEntity;
    /**
     * The raw response code of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    rawResponseCode?: string;
    /**
     * The raw response description of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    rawResponseDescription?: string;
    /**
     * The AVS response code of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    avsResponseCode?: string;
    /**
     * The CVV response code of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    cvvResponseCode?: string;
    /**
     * The authorization code of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    authCode?: string;
    /**
     * The authorized amount of the transaction.
     * @type {number}
     * @memberof TransactionEntity
     */
    authorizedAmount?: number;
    /**
     * The captured amount of the transaction.
     * @type {number}
     * @memberof TransactionEntity
     */
    capturedAmount?: number;
    /**
     * The settled amount of the transaction.
     * @type {number}
     * @memberof TransactionEntity
     */
    settledAmount?: number;
    /**
     * The refundable amount of the transaction.
     * @type {number}
     * @memberof TransactionEntity
     */
    refundableAmount?: number;
    /**
     * The refunded amount of the transaction.
     * @type {number}
     * @memberof TransactionEntity
     */
    refundedAmount?: number;
    /**
     * The external transaction ID of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    externalTransactionId?: string;
    /**
     * The country of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    country?: string;
    /**
     * The external buyer ID of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    externalBuyerId?: string;
    /**
     * The buyer ID of the transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    buyerId?: string;
    /**
     * The created date of the transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    createdAt?: Date;
    /**
     * The updated date of the transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    updatedAt?: Date;
    /**
     * The authorized date of the card transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    authorizedAt?: Date;
    /**
     * The captured date of the card transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    capturedAt?: Date;
    /**
     * The declined date of the card transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    declinedAt?: Date;
    /**
     * The declined reason of the card transaction.
     * @type {string}
     * @memberof TransactionEntity
     */
    declinedReason?: string;
    /**
     * The submitted date of the ACH transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    submittedAt?: Date;
    /**
     * The rejected date of the ACH transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    rejectedAt?: Date;
    /**
     * The voided date of the card or ACH transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    voidedAt?: Date;
    /**
     * The transmitted date of the ACH transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    transmittedAt?: Date;
    /**
     * The settled date of the ACH transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    settledAt?: Date;
    /**
     * The returned date of the ACH transaction.
     * @type {Date}
     * @memberof TransactionEntity
     */
    returnedAt?: Date;
    /**
     * Descriptive labels or keywords that can be assigned to the transaction.
     * @type {Array<TagEntity>}
     * @memberof TransactionEntity
     */
    tags?: Array<TagEntity>;
}
/**
 * @export
 */
export declare const TransactionEntityStatusEnum: {
    readonly Processing: "processing";
    readonly BuyerApprovalPending: "buyerApprovalPending";
    readonly Authorized: "authorized";
    readonly AuthorizationFailed: "authorizationFailed";
    readonly CaptureFailed: "captureFailed";
    readonly Declined: "declined";
    readonly CapturePending: "capturePending";
    readonly Captured: "captured";
    readonly VoidPending: "voidPending";
    readonly Voided: "voided";
    readonly Hold: "hold";
    readonly Submitted: "submitted";
    readonly Transmitted: "transmitted";
    readonly Settled: "settled";
    readonly Returned: "returned";
    readonly Rejected: "rejected";
};
export type TransactionEntityStatusEnum = typeof TransactionEntityStatusEnum[keyof typeof TransactionEntityStatusEnum];
/**
 * @export
 */
export declare const TransactionEntityIntentEnum: {
    readonly Capture: "capture";
    readonly Authorize: "authorize";
    readonly Debit: "debit";
    readonly Credit: "credit";
};
export type TransactionEntityIntentEnum = typeof TransactionEntityIntentEnum[keyof typeof TransactionEntityIntentEnum];
/**
 * @export
 */
export declare const TransactionEntityCurrencyEnum: {
    readonly Usd: "USD";
    readonly Cad: "CAD";
    readonly Aud: "AUD";
};
export type TransactionEntityCurrencyEnum = typeof TransactionEntityCurrencyEnum[keyof typeof TransactionEntityCurrencyEnum];
/**
 * @export
 */
export declare const TransactionEntitySecCodeEnum: {
    readonly Ppd: "PPD";
    readonly Ccd: "CCD";
    readonly Web: "WEB";
    readonly Tel: "TEL";
};
export type TransactionEntitySecCodeEnum = typeof TransactionEntitySecCodeEnum[keyof typeof TransactionEntitySecCodeEnum];
/**
 * Check if a given object implements the TransactionEntity interface.
 */
export declare function instanceOfTransactionEntity(value: object): boolean;
export declare function TransactionEntityFromJSON(json: any): TransactionEntity;
export declare function TransactionEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionEntity;
export declare function TransactionEntityToJSON(value?: TransactionEntity | null): any;
