/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import { exists, removeNullUndefined } from '../runtime';
import { TagEntityFromJSON, TagEntityToJSON, } from './TagEntity';
import { TransactionFeeDetailsEntityFromJSON, TransactionFeeDetailsEntityToJSON, } from './TransactionFeeDetailsEntity';
import { TransactionPaymentInstrumentBaseEntityFromJSON, TransactionPaymentInstrumentBaseEntityToJSON, } from './TransactionPaymentInstrumentBaseEntity';
/**
 * @export
 */
export const TransactionEntityStatusEnum = {
    Processing: 'processing',
    BuyerApprovalPending: 'buyerApprovalPending',
    Authorized: 'authorized',
    AuthorizationFailed: 'authorizationFailed',
    CaptureFailed: 'captureFailed',
    Declined: 'declined',
    CapturePending: 'capturePending',
    Captured: 'captured',
    VoidPending: 'voidPending',
    Voided: 'voided',
    Hold: 'hold',
    Submitted: 'submitted',
    Transmitted: 'transmitted',
    Settled: 'settled',
    Returned: 'returned',
    Rejected: 'rejected'
};
/**
 * @export
 */
export const TransactionEntityIntentEnum = {
    Capture: 'capture',
    Authorize: 'authorize',
    Debit: 'debit',
    Credit: 'credit'
};
/**
 * @export
 */
export const TransactionEntityCurrencyEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Aud: 'AUD'
};
/**
 * @export
 */
export const TransactionEntitySecCodeEnum = {
    Ppd: 'PPD',
    Ccd: 'CCD',
    Web: 'WEB',
    Tel: 'TEL'
};
/**
 * Check if a given object implements the TransactionEntity interface.
 */
export function instanceOfTransactionEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "merchantId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "intent" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "netAmount" in value;
    isInstance = isInstance && "fee" in value;
    return isInstance;
}
export function TransactionEntityFromJSON(json) {
    return TransactionEntityFromJSONTyped(json, false);
}
export function TransactionEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'transactionId': json['transactionId'],
        'merchantId': json['merchantId'],
        'status': json['status'],
        'intent': json['intent'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'amount': json['amount'],
        'netAmount': json['netAmount'],
        'fee': json['fee'],
        'feeDetails': !exists(json, 'feeDetails') ? undefined : (json['feeDetails'].map(TransactionFeeDetailsEntityFromJSON)),
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'secCode': !exists(json, 'secCode') ? undefined : json['secCode'],
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : TransactionPaymentInstrumentBaseEntityFromJSON(json['paymentMethod']),
        'rawResponseCode': !exists(json, 'rawResponseCode') ? undefined : json['rawResponseCode'],
        'rawResponseDescription': !exists(json, 'rawResponseDescription') ? undefined : json['rawResponseDescription'],
        'avsResponseCode': !exists(json, 'avsResponseCode') ? undefined : json['avsResponseCode'],
        'cvvResponseCode': !exists(json, 'cvvResponseCode') ? undefined : json['cvvResponseCode'],
        'authCode': !exists(json, 'authCode') ? undefined : json['authCode'],
        'authorizedAmount': !exists(json, 'authorizedAmount') ? undefined : json['authorizedAmount'],
        'capturedAmount': !exists(json, 'capturedAmount') ? undefined : json['capturedAmount'],
        'settledAmount': !exists(json, 'settledAmount') ? undefined : json['settledAmount'],
        'refundableAmount': !exists(json, 'refundableAmount') ? undefined : json['refundableAmount'],
        'refundedAmount': !exists(json, 'refundedAmount') ? undefined : json['refundedAmount'],
        'externalTransactionId': !exists(json, 'externalTransactionId') ? undefined : json['externalTransactionId'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'externalBuyerId': !exists(json, 'externalBuyerId') ? undefined : json['externalBuyerId'],
        'buyerId': !exists(json, 'buyerId') ? undefined : json['buyerId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'authorizedAt': !exists(json, 'authorizedAt') ? undefined : (new Date(json['authorizedAt'])),
        'capturedAt': !exists(json, 'capturedAt') ? undefined : (new Date(json['capturedAt'])),
        'declinedAt': !exists(json, 'declinedAt') ? undefined : (new Date(json['declinedAt'])),
        'declinedReason': !exists(json, 'declinedReason') ? undefined : json['declinedReason'],
        'submittedAt': !exists(json, 'submittedAt') ? undefined : (new Date(json['submittedAt'])),
        'rejectedAt': !exists(json, 'rejectedAt') ? undefined : (new Date(json['rejectedAt'])),
        'voidedAt': !exists(json, 'voidedAt') ? undefined : (new Date(json['voidedAt'])),
        'transmittedAt': !exists(json, 'transmittedAt') ? undefined : (new Date(json['transmittedAt'])),
        'settledAt': !exists(json, 'settledAt') ? undefined : (new Date(json['settledAt'])),
        'returnedAt': !exists(json, 'returnedAt') ? undefined : (new Date(json['returnedAt'])),
        'tags': !exists(json, 'tags') ? undefined : (json['tags'].map(TagEntityFromJSON)),
    };
    return removeNullUndefined(typed);
}
export function TransactionEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'transactionId': value.transactionId,
        'merchantId': value.merchantId,
        'status': value.status,
        'intent': value.intent,
        'description': value.description,
        'amount': value.amount,
        'netAmount': value.netAmount,
        'fee': value.fee,
        'feeDetails': value.feeDetails === undefined ? undefined : (value.feeDetails.map(TransactionFeeDetailsEntityToJSON)),
        'currency': value.currency,
        'secCode': value.secCode,
        'paymentMethod': TransactionPaymentInstrumentBaseEntityToJSON(value.paymentMethod),
        'rawResponseCode': value.rawResponseCode,
        'rawResponseDescription': value.rawResponseDescription,
        'avsResponseCode': value.avsResponseCode,
        'cvvResponseCode': value.cvvResponseCode,
        'authCode': value.authCode,
        'authorizedAmount': value.authorizedAmount,
        'capturedAmount': value.capturedAmount,
        'settledAmount': value.settledAmount,
        'refundableAmount': value.refundableAmount,
        'refundedAmount': value.refundedAmount,
        'externalTransactionId': value.externalTransactionId,
        'country': value.country,
        'externalBuyerId': value.externalBuyerId,
        'buyerId': value.buyerId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'authorizedAt': value.authorizedAt === undefined ? undefined : (value.authorizedAt.toISOString()),
        'capturedAt': value.capturedAt === undefined ? undefined : (value.capturedAt.toISOString()),
        'declinedAt': value.declinedAt === undefined ? undefined : (value.declinedAt.toISOString()),
        'declinedReason': value.declinedReason,
        'submittedAt': value.submittedAt === undefined ? undefined : (value.submittedAt.toISOString()),
        'rejectedAt': value.rejectedAt === undefined ? undefined : (value.rejectedAt.toISOString()),
        'voidedAt': value.voidedAt === undefined ? undefined : (value.voidedAt.toISOString()),
        'transmittedAt': value.transmittedAt === undefined ? undefined : (value.transmittedAt.toISOString()),
        'settledAt': value.settledAt === undefined ? undefined : (value.settledAt.toISOString()),
        'returnedAt': value.returnedAt === undefined ? undefined : (value.returnedAt.toISOString()),
        'tags': value.tags === undefined ? undefined : (value.tags.map(TagEntityToJSON)),
    };
}
