/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import type { TransactionNoteEntity } from './TransactionNoteEntity';
/**
 *
 * @export
 * @interface TransactionRefundBaseEntity
 */
export interface TransactionRefundBaseEntity {
    /**
     * Unique identifier of the merchant.
     * @type {string}
     * @memberof TransactionRefundBaseEntity
     */
    merchantId: string;
    /**
     * Unique identifier of the refund.
     * @type {string}
     * @memberof TransactionRefundBaseEntity
     */
    refundId: string;
    /**
     * Unique identifier of the transaction.
     * @type {string}
     * @memberof TransactionRefundBaseEntity
     */
    transactionId: string;
    /**
     * Unique identifier of the refund transaction.
     * @type {string}
     * @memberof TransactionRefundBaseEntity
     */
    refundTransactionId?: string;
    /**
     * The amount of the refund.
     * @type {number}
     * @memberof TransactionRefundBaseEntity
     */
    refundedAmount: number;
    /**
     * The date the refund was created.
     * @type {Date}
     * @memberof TransactionRefundBaseEntity
     */
    createdAt: Date;
    /**
     * The date the refund was last updated.
     * @type {Date}
     * @memberof TransactionRefundBaseEntity
     */
    updatedAt: Date;
    /**
     * The status of the refund.
     * @type {string}
     * @memberof TransactionRefundBaseEntity
     */
    status: TransactionRefundBaseEntityStatusEnum;
    /**
     * The reason for the refund.
     * @type {string}
     * @memberof TransactionRefundBaseEntity
     */
    reason?: string;
    /**
     * The description for the refund if reason is OTHER.
     * @type {string}
     * @memberof TransactionRefundBaseEntity
     */
    description?: string;
    /**
     * The currency.
     * @type {object}
     * @memberof TransactionRefundBaseEntity
     */
    currency?: object;
    /**
     * The notes for the refund.
     * @type {Array<TransactionNoteEntity>}
     * @memberof TransactionRefundBaseEntity
     */
    notes?: Array<TransactionNoteEntity>;
}
/**
 * @export
 */
export declare const TransactionRefundBaseEntityStatusEnum: {
    readonly Processing: "processing";
    readonly Succeeded: "succeeded";
    readonly Declined: "declined";
    readonly Failed: "failed";
    readonly Voided: "voided";
    readonly Hold: "hold";
    readonly Submitted: "submitted";
    readonly Transmitted: "transmitted";
    readonly Settled: "settled";
    readonly Returned: "returned";
};
export type TransactionRefundBaseEntityStatusEnum = typeof TransactionRefundBaseEntityStatusEnum[keyof typeof TransactionRefundBaseEntityStatusEnum];
/**
 * Check if a given object implements the TransactionRefundBaseEntity interface.
 */
export declare function instanceOfTransactionRefundBaseEntity(value: object): boolean;
export declare function TransactionRefundBaseEntityFromJSON(json: any): TransactionRefundBaseEntity;
export declare function TransactionRefundBaseEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRefundBaseEntity;
export declare function TransactionRefundBaseEntityToJSON(value?: TransactionRefundBaseEntity | null): any;
