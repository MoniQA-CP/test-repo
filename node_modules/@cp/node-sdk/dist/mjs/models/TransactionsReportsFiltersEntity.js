/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import { exists, removeNullUndefined } from '../runtime';
/**
 * @export
 */
export const TransactionsReportsFiltersEntityPaymentMethodsEnum = {
    Card: 'CARD',
    Bank: 'BANK'
};
/**
 * @export
 */
export const TransactionsReportsFiltersEntityAccountTypesEnum = {
    Checking: 'CHECKING',
    Savings: 'SAVINGS'
};
/**
 * @export
 */
export const TransactionsReportsFiltersEntityCardTypesEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Prepaid: 'PREPAID'
};
/**
 * @export
 */
export const TransactionsReportsFiltersEntityCardSchemesEnum = {
    Visa: 'visa',
    Mastercard: 'mastercard',
    Amex: 'amex',
    Discover: 'discover',
    Jcb: 'jcb',
    DinersClub: 'diners_club',
    Maestro: 'maestro'
};
/**
 * @export
 */
export const TransactionsReportsFiltersEntityTransactionIntentsEnum = {
    Capture: 'capture',
    Authorize: 'authorize',
    Debit: 'debit',
    Credit: 'credit'
};
/**
 * @export
 */
export const TransactionsReportsFiltersEntityTransactionStatusesEnum = {
    Authorized: 'authorized',
    AuthorizationFailed: 'authorizationFailed',
    Declined: 'declined',
    Captured: 'captured',
    Voided: 'voided',
    Hold: 'hold',
    Submitted: 'submitted',
    Transmitted: 'transmitted',
    Settled: 'settled',
    Returned: 'returned',
    Rejected: 'rejected'
};
/**
 * Check if a given object implements the TransactionsReportsFiltersEntity interface.
 */
export function instanceOfTransactionsReportsFiltersEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "paymentMethods" in value;
    return isInstance;
}
export function TransactionsReportsFiltersEntityFromJSON(json) {
    return TransactionsReportsFiltersEntityFromJSONTyped(json, false);
}
export function TransactionsReportsFiltersEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'paymentMethods': json['paymentMethods'],
        'accountTypes': !exists(json, 'accountTypes') ? undefined : json['accountTypes'],
        'cardTypes': !exists(json, 'cardTypes') ? undefined : json['cardTypes'],
        'cardSchemes': !exists(json, 'cardSchemes') ? undefined : json['cardSchemes'],
        'transactionIntents': !exists(json, 'transactionIntents') ? undefined : json['transactionIntents'],
        'transactionStatuses': !exists(json, 'transactionStatuses') ? undefined : json['transactionStatuses'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'amountGreaterThan': !exists(json, 'amountGreaterThan') ? undefined : json['amountGreaterThan'],
        'amountLessThan': !exists(json, 'amountLessThan') ? undefined : json['amountLessThan'],
        'amountMin': !exists(json, 'amountMin') ? undefined : json['amountMin'],
        'amountMax': !exists(json, 'amountMax') ? undefined : json['amountMax'],
    };
    return removeNullUndefined(typed);
}
export function TransactionsReportsFiltersEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'paymentMethods': value.paymentMethods,
        'accountTypes': value.accountTypes,
        'cardTypes': value.cardTypes,
        'cardSchemes': value.cardSchemes,
        'transactionIntents': value.transactionIntents,
        'transactionStatuses': value.transactionStatuses,
        'amount': value.amount,
        'amountGreaterThan': value.amountGreaterThan,
        'amountLessThan': value.amountLessThan,
        'amountMin': value.amountMin,
        'amountMax': value.amountMax,
    };
}
