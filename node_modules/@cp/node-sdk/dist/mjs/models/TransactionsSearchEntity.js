/* tslint:disable */
/* eslint-disable */
/**
 * Channel Payments API
 *
 * NOTE: This class is auto generated. Do not edit the class manually.
 *
 */
import { exists, removeNullUndefined } from '../runtime';
import { TransactionEntityFromJSON, TransactionEntityToJSON, } from './TransactionEntity';
/**
 * Check if a given object implements the TransactionsSearchEntity interface.
 */
export function instanceOfTransactionsSearchEntity(value) {
    let isInstance = true;
    isInstance = isInstance && "transactions" in value;
    isInstance = isInstance && "limit" in value;
    isInstance = isInstance && "page" in value;
    isInstance = isInstance && "pageCount" in value;
    isInstance = isInstance && "totalCount" in value;
    isInstance = isInstance && "filteredCount" in value;
    return isInstance;
}
export function TransactionsSearchEntityFromJSON(json) {
    return TransactionsSearchEntityFromJSONTyped(json, false);
}
export function TransactionsSearchEntityFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    const typed = {
        'transactions': (json['transactions'].map(TransactionEntityFromJSON)),
        'limit': json['limit'],
        'page': json['page'],
        'pageCount': json['pageCount'],
        'totalCount': json['totalCount'],
        'filteredCount': json['filteredCount'],
        'nextCursor': !exists(json, 'nextCursor') ? undefined : json['nextCursor'],
        'prevCursor': !exists(json, 'prevCursor') ? undefined : json['prevCursor'],
    };
    return removeNullUndefined(typed);
}
export function TransactionsSearchEntityToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'transactions': (value.transactions.map(TransactionEntityToJSON)),
        'limit': value.limit,
        'page': value.page,
        'pageCount': value.pageCount,
        'totalCount': value.totalCount,
        'filteredCount': value.filteredCount,
        'nextCursor': value.nextCursor,
        'prevCursor': value.prevCursor,
    };
}
